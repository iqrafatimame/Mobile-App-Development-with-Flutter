define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/semantics/semantics_event.dart', 'packages/flutter/src/scheduler/ticker.dart', 'packages/flutter/src/material/toggleable.dart'], (function load__packages__flutter__src__material__radio_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__semantics__semantics_event$46dart, packages__flutter__src__scheduler__ticker$46dart, packages__flutter__src__material__toggleable$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const actions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__actions;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const mouse_cursor = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_cursor;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const debug = packages__flutter__src__material__icon_button$46dart.src__material__debug;
  const semantics_event = packages__flutter__src__semantics__semantics_event$46dart.src__semantics__semantics_event;
  const ticker = packages__flutter__src__scheduler__ticker$46dart.src__scheduler__ticker;
  const toggleable = packages__flutter__src__material__toggleable$46dart.src__material__toggleable;
  var radio = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    CallbackActionOfActivateIntent: () => (T$.CallbackActionOfActivateIntent = dart.constFn(actions.CallbackAction$(actions.ActivateIntent)))(),
    ActionOfIntent: () => (T$.ActionOfIntent = dart.constFn(actions.Action$(actions.Intent)))(),
    LinkedMapOfType$ActionOfIntent: () => (T$.LinkedMapOfType$ActionOfIntent = dart.constFn(_js_helper.LinkedMap$(core.Type, T$.ActionOfIntent())))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    LinkedHashSetOfMaterialState: () => (T$.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(material_state.MaterialState)))(),
    ColorN: () => (T$.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    SetOfMaterialState: () => (T$.SetOfMaterialState = dart.constFn(core.Set$(material_state.MaterialState)))(),
    SetOfMaterialStateToColorN: () => (T$.SetOfMaterialStateToColorN = dart.constFn(dart.fnType(T$.ColorN(), [T$.SetOfMaterialState()])))(),
    SetOfMaterialStateToColor: () => (T$.SetOfMaterialStateToColor = dart.constFn(dart.fnType(ui.Color, [T$.SetOfMaterialState()])))(),
    MouseCursorN: () => (T$.MouseCursorN = dart.constFn(dart.nullable(mouse_cursor.MouseCursor)))(),
    _LocationL: () => (T$._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    BuildContextTo_RadioRenderObjectWidget: () => (T$.BuildContextTo_RadioRenderObjectWidget = dart.constFn(dart.fnType(radio._RadioRenderObjectWidget, [framework.BuildContext])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: semantics_event.TapSemanticEvent.prototype,
        [SemanticsEvent_type]: "tap"
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 48,
        [OffsetBase__dx]: 48
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_name]: "MaterialTapTargetSize.padded",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 40,
        [OffsetBase__dx]: 40
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_name]: "MaterialTapTargetSize.shrinkWrap",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selected",
        [_Location_column]: 13,
        [_Location_line]: 514,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeColor",
        [_Location_column]: 13,
        [_Location_line]: 515,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inactiveColor",
        [_Location_column]: 13,
        [_Location_line]: 516,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusColor",
        [_Location_column]: 13,
        [_Location_line]: 517,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 13,
        [_Location_line]: 518,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "reactionColor",
        [_Location_column]: 13,
        [_Location_line]: 519,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inactiveReactionColor",
        [_Location_column]: 13,
        [_Location_line]: 520,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "splashRadius",
        [_Location_column]: 13,
        [_Location_line]: 521,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChanged",
        [_Location_column]: 13,
        [_Location_line]: 522,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "toggleable",
        [_Location_column]: 13,
        [_Location_line]: 523,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "additionalConstraints",
        [_Location_column]: 13,
        [_Location_line]: 524,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "vsync",
        [_Location_column]: 13,
        [_Location_line]: 525,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hasFocus",
        [_Location_column]: 13,
        [_Location_line]: 526,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hovering",
        [_Location_column]: 13,
        [_Location_line]: 527,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.constList([C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20], T$._LocationL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 513,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/radio.dart"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 512,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.constList([C[23] || CT.C23], T$._LocationL());
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[22] || CT.C22,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 511,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/radio.dart"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "actions",
        [_Location_column]: 7,
        [_Location_line]: 504,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 505,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 506,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseCursor",
        [_Location_column]: 7,
        [_Location_line]: 507,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enabled",
        [_Location_column]: 7,
        [_Location_line]: 508,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onShowFocusHighlight",
        [_Location_column]: 7,
        [_Location_line]: 509,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onShowHoverHighlight",
        [_Location_column]: 7,
        [_Location_line]: 510,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 511,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.constList([C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33], T$._LocationL());
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[25] || CT.C25,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 503,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/radio.dart"
      });
    }
  }, false);
  var C = Array(34).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/material/radio.dart",
    "package:flutter/src/material/radio.dart"
  ];
  var value$ = dart.privateName(radio, "Radio.value");
  var groupValue$ = dart.privateName(radio, "Radio.groupValue");
  var onChanged$ = dart.privateName(radio, "Radio.onChanged");
  var mouseCursor$ = dart.privateName(radio, "Radio.mouseCursor");
  var toggleable$ = dart.privateName(radio, "Radio.toggleable");
  var activeColor$ = dart.privateName(radio, "Radio.activeColor");
  var fillColor$ = dart.privateName(radio, "Radio.fillColor");
  var materialTapTargetSize$ = dart.privateName(radio, "Radio.materialTapTargetSize");
  var visualDensity$ = dart.privateName(radio, "Radio.visualDensity");
  var focusColor$ = dart.privateName(radio, "Radio.focusColor");
  var hoverColor$ = dart.privateName(radio, "Radio.hoverColor");
  var overlayColor$ = dart.privateName(radio, "Radio.overlayColor");
  var splashRadius$ = dart.privateName(radio, "Radio.splashRadius");
  var focusNode$ = dart.privateName(radio, "Radio.focusNode");
  var autofocus$ = dart.privateName(radio, "Radio.autofocus");
  const _is_Radio_default = Symbol('_is_Radio_default');
  radio.Radio$ = dart.generic(T => {
    var _RadioStateOfT = () => (_RadioStateOfT = dart.constFn(radio._RadioState$(T)))();
    class Radio extends framework.StatefulWidget {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      get groupValue() {
        return this[groupValue$];
      }
      set groupValue(value) {
        super.groupValue = value;
      }
      get onChanged() {
        return this[onChanged$];
      }
      set onChanged(value) {
        super.onChanged = value;
      }
      get mouseCursor() {
        return this[mouseCursor$];
      }
      set mouseCursor(value) {
        super.mouseCursor = value;
      }
      get toggleable() {
        return this[toggleable$];
      }
      set toggleable(value) {
        super.toggleable = value;
      }
      get activeColor() {
        return this[activeColor$];
      }
      set activeColor(value) {
        super.activeColor = value;
      }
      get fillColor() {
        return this[fillColor$];
      }
      set fillColor(value) {
        super.fillColor = value;
      }
      get materialTapTargetSize() {
        return this[materialTapTargetSize$];
      }
      set materialTapTargetSize(value) {
        super.materialTapTargetSize = value;
      }
      get visualDensity() {
        return this[visualDensity$];
      }
      set visualDensity(value) {
        super.visualDensity = value;
      }
      get focusColor() {
        return this[focusColor$];
      }
      set focusColor(value) {
        super.focusColor = value;
      }
      get hoverColor() {
        return this[hoverColor$];
      }
      set hoverColor(value) {
        super.hoverColor = value;
      }
      get overlayColor() {
        return this[overlayColor$];
      }
      set overlayColor(value) {
        super.overlayColor = value;
      }
      get splashRadius() {
        return this[splashRadius$];
      }
      set splashRadius(value) {
        super.splashRadius = value;
      }
      get focusNode() {
        return this[focusNode$];
      }
      set focusNode(value) {
        super.focusNode = value;
      }
      get autofocus() {
        return this[autofocus$];
      }
      set autofocus(value) {
        super.autofocus = value;
      }
      createState() {
        return new (_RadioStateOfT()).new();
      }
    }
    (Radio.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let groupValue = opts && 'groupValue' in opts ? opts.groupValue : null;
      let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
      let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
      let toggleable = opts && 'toggleable' in opts ? opts.toggleable : false;
      if (toggleable == null) dart.nullFailed(I[0], 113, 10, "toggleable");
      let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
      let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
      let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
      let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
      let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
      let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
      if (autofocus == null) dart.nullFailed(I[0], 123, 10, "autofocus");
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[value$] = value;
      this[groupValue$] = groupValue;
      this[onChanged$] = onChanged;
      this[mouseCursor$] = mouseCursor;
      this[toggleable$] = toggleable;
      this[activeColor$] = activeColor;
      this[fillColor$] = fillColor;
      this[focusColor$] = focusColor;
      this[hoverColor$] = hoverColor;
      this[overlayColor$] = overlayColor;
      this[splashRadius$] = splashRadius;
      this[materialTapTargetSize$] = materialTapTargetSize;
      this[visualDensity$] = visualDensity;
      this[focusNode$] = focusNode;
      this[autofocus$] = autofocus;
      if (!(autofocus != null)) dart.assertFailed(null, I[0], 124, 15, "autofocus != null");
      if (!(toggleable != null)) dart.assertFailed(null, I[0], 125, 15, "toggleable != null");
      Radio.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = Radio.prototype;
    dart.addTypeTests(Radio);
    Radio.prototype[_is_Radio_default] = true;
    dart.addTypeCaches(Radio);
    dart.setMethodSignature(Radio, () => ({
      __proto__: dart.getMethods(Radio.__proto__),
      createState: dart.fnType(radio._RadioState$(T), [])
    }));
    dart.setLibraryUri(Radio, I[1]);
    dart.setFieldSignature(Radio, () => ({
      __proto__: dart.getFields(Radio.__proto__),
      value: dart.finalFieldType(T),
      groupValue: dart.finalFieldType(dart.nullable(T)),
      onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(T)]))),
      mouseCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
      toggleable: dart.finalFieldType(core.bool),
      activeColor: dart.finalFieldType(dart.nullable(ui.Color)),
      fillColor: dart.finalFieldType(dart.nullable(material_state.MaterialStateProperty$(dart.nullable(ui.Color)))),
      materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
      visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
      focusColor: dart.finalFieldType(dart.nullable(ui.Color)),
      hoverColor: dart.finalFieldType(dart.nullable(ui.Color)),
      overlayColor: dart.finalFieldType(dart.nullable(material_state.MaterialStateProperty$(dart.nullable(ui.Color)))),
      splashRadius: dart.finalFieldType(dart.nullable(core.double)),
      focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
      autofocus: dart.finalFieldType(core.bool)
    }));
    return Radio;
  });
  radio.Radio = radio.Radio$();
  dart.addTypeTests(radio.Radio, _is_Radio_default);
  var ___RadioState__actionMap = dart.privateName(radio, "_#_RadioState#_actionMap");
  var ___RadioState__actionMap_isSet = dart.privateName(radio, "_#_RadioState#_actionMap#isSet");
  var _focused = dart.privateName(radio, "_focused");
  var _hovering = dart.privateName(radio, "_hovering");
  var _actionMap = dart.privateName(radio, "_actionMap");
  var _actionHandler = dart.privateName(radio, "_actionHandler");
  var SemanticsEvent_type = dart.privateName(semantics_event, "SemanticsEvent.type");
  var _handleHighlightChanged = dart.privateName(radio, "_handleHighlightChanged");
  var _handleHoverChanged = dart.privateName(radio, "_handleHoverChanged");
  var _handleChanged = dart.privateName(radio, "_handleChanged");
  var _selected = dart.privateName(radio, "_selected");
  var _states = dart.privateName(radio, "_states");
  var _widgetFillColor = dart.privateName(radio, "_widgetFillColor");
  var _defaultFillColor = dart.privateName(radio, "_defaultFillColor");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _name = dart.privateName(theme_data, "_name");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const _is__RadioState_default = Symbol('_is__RadioState_default');
  radio._RadioState$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var TNTovoid = () => (TNTovoid = dart.constFn(dart.fnType(dart.void, [TN()])))();
    var TNToNvoid = () => (TNToNvoid = dart.constFn(dart.nullable(TNTovoid())))();
    const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(radio.Radio$(T)) {};
    (State_TickerProviderStateMixin$36.new = function() {
      ticker_provider.TickerProviderStateMixin$(radio.Radio$(T))[dart.mixinNew].call(this);
      State_TickerProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = State_TickerProviderStateMixin$36.prototype;
    dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(radio.Radio$(T)));
    class _RadioState extends State_TickerProviderStateMixin$36 {
      get enabled() {
        return TNToNvoid().as(this.widget.onChanged) != null;
      }
      get [_actionMap]() {
        let t0;
        return dart.test(this[___RadioState__actionMap_isSet]) ? (t0 = this[___RadioState__actionMap], t0) : dart.throw(new _internal.LateError.fieldNI("_actionMap"));
      }
      set [_actionMap](t0) {
        if (t0 == null) dart.nullFailed(I[0], 364, 34, "null");
        this[___RadioState__actionMap_isSet] = true;
        this[___RadioState__actionMap] = t0;
      }
      initState() {
        super.initState();
        this[_actionMap] = new (T$.LinkedMapOfType$ActionOfIntent()).from([dart.wrapType(actions.ActivateIntent), new (T$.CallbackActionOfActivateIntent()).new({onInvoke: dart.bind(this, _actionHandler)})]);
      }
      [_actionHandler](intent) {
        if (intent == null) dart.nullFailed(I[0], 376, 38, "intent");
        if (TNToNvoid().as(this.widget.onChanged) != null) {
          dart.nullCheck(TNToNvoid().as(this.widget.onChanged))(this.widget.value);
        }
        let renderObject = dart.nullCheck(this.context.findRenderObject());
        renderObject.sendSemanticsEvent(C[0] || CT.C0);
      }
      [_handleHighlightChanged](focused) {
        if (focused == null) dart.nullFailed(I[0], 385, 37, "focused");
        if (this[_focused] != focused) {
          this.setState(dart.fn(() => {
            this[_focused] = focused;
          }, T$.VoidTovoid()));
        }
      }
      [_handleHoverChanged](hovering) {
        if (hovering == null) dart.nullFailed(I[0], 392, 33, "hovering");
        if (this[_hovering] != hovering) {
          this.setState(dart.fn(() => {
            this[_hovering] = hovering;
          }, T$.VoidTovoid()));
        }
      }
      [_handleChanged](selected) {
        if (selected == null) {
          dart.nullCheck(TNToNvoid().as(this.widget.onChanged))(null);
          return;
        }
        if (dart.test(selected)) {
          dart.nullCheck(TNToNvoid().as(this.widget.onChanged))(this.widget.value);
        }
      }
      get [_selected]() {
        return dart.equals(this.widget.value, this.widget.groupValue);
      }
      get [_states]() {
        return (() => {
          let t1 = T$.LinkedHashSetOfMaterialState().new();
          if (!dart.test(this.enabled)) t1.add(material_state.MaterialState.disabled);
          if (dart.test(this[_hovering])) t1.add(material_state.MaterialState.hovered);
          if (dart.test(this[_focused])) t1.add(material_state.MaterialState.focused);
          if (dart.test(this[_selected])) t1.add(material_state.MaterialState.selected);
          return t1;
        })();
      }
      get [_widgetFillColor]() {
        return material_state.MaterialStateProperty.resolveWith(T$.ColorN(), dart.fn(states => {
          if (states == null) dart.nullFailed(I[0], 418, 66, "states");
          if (dart.test(states.contains(material_state.MaterialState.disabled))) {
            return null;
          }
          if (dart.test(states.contains(material_state.MaterialState.selected))) {
            return this.widget.activeColor;
          }
          return null;
        }, T$.SetOfMaterialStateToColorN()));
      }
      get [_defaultFillColor]() {
        let themeData = theme.Theme.of(this.context);
        return material_state.MaterialStateProperty.resolveWith(ui.Color, dart.fn(states => {
          if (states == null) dart.nullFailed(I[0], 431, 66, "states");
          if (dart.test(states.contains(material_state.MaterialState.disabled))) {
            return themeData.disabledColor;
          }
          if (dart.test(states.contains(material_state.MaterialState.selected))) {
            return themeData.toggleableActiveColor;
          }
          return themeData.unselectedWidgetColor;
        }, T$.SetOfMaterialStateToColor()));
      }
      build(context) {
        let t2, t2$, t2$0, t2$1, t3, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t3$, t2$8, t2$9, t2$10, t2$11, t3$0, t2$12, t2$13, t2$14, t2$15, t2$16, t3$1, t2$17, t2$18, t2$19, t2$20, t2$21, t3$2, t2$22, t2$23, t2$24, t2$25, t3$3, t2$26, t2$27, t2$28, t2$29, t3$4, t2$30, t2$31;
        if (context == null) dart.nullFailed(I[0], 443, 29, "context");
        if (!dart.test(debug.debugCheckHasMaterial(context))) dart.assertFailed(null, I[0], 444, 12, "debugCheckHasMaterial(context)");
        let themeData = theme.Theme.of(context);
        let effectiveMaterialTapTargetSize = (t2$ = (t2 = this.widget.materialTapTargetSize, t2 == null ? themeData.radioTheme.materialTapTargetSize : t2), t2$ == null ? themeData.materialTapTargetSize : t2$);
        let effectiveVisualDensity = (t2$1 = (t2$0 = this.widget.visualDensity, t2$0 == null ? themeData.radioTheme.visualDensity : t2$0), t2$1 == null ? themeData.visualDensity : t2$1);
        let size = null;
        switch (effectiveMaterialTapTargetSize) {
          case C[2] || CT.C2:
          {
            size = C[1] || CT.C1;
            break;
          }
          case C[4] || CT.C4:
          {
            size = C[3] || CT.C3;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        size = size['+'](effectiveVisualDensity.baseSizeAdjustment);
        let additionalConstraints = new box.BoxConstraints.tight(size);
        let effectiveMouseCursor = (t2$3 = (t2$2 = material_state.MaterialStateProperty.resolveAs(T$.MouseCursorN(), this.widget.mouseCursor, this[_states]), t2$2 == null ? (t3 = themeData.radioTheme.mouseCursor, t3 == null ? null : t3.resolve(this[_states])) : t2$2), t2$3 == null ? material_state.MaterialStateProperty.resolveAs(mouse_cursor.MouseCursor, material_state.MaterialStateMouseCursor.clickable, this[_states]) : t2$3);
        let activeStates = (t2$4 = this[_states], (() => {
          t2$4.add(material_state.MaterialState.selected);
          return t2$4;
        })());
        let inactiveStates = (t2$5 = this[_states], (() => {
          t2$5.remove(material_state.MaterialState.selected);
          return t2$5;
        })());
        let effectiveActiveColor = (t2$9 = (t2$8 = (t2$7 = (t2$6 = this.widget.fillColor, t2$6 == null ? null : t2$6.resolve(activeStates)), t2$7 == null ? this[_widgetFillColor].resolve(activeStates) : t2$7), t2$8 == null ? (t3$ = themeData.radioTheme.fillColor, t3$ == null ? null : t3$.resolve(activeStates)) : t2$8), t2$9 == null ? this[_defaultFillColor].resolve(activeStates) : t2$9);
        let effectiveInactiveColor = (t2$13 = (t2$12 = (t2$11 = (t2$10 = this.widget.fillColor, t2$10 == null ? null : t2$10.resolve(inactiveStates)), t2$11 == null ? this[_widgetFillColor].resolve(inactiveStates) : t2$11), t2$12 == null ? (t3$0 = themeData.radioTheme.fillColor, t3$0 == null ? null : t3$0.resolve(inactiveStates)) : t2$12), t2$13 == null ? this[_defaultFillColor].resolve(inactiveStates) : t2$13);
        let focusedStates = (t2$14 = this[_states], (() => {
          t2$14.add(material_state.MaterialState.focused);
          return t2$14;
        })());
        let effectiveFocusOverlayColor = (t2$18 = (t2$17 = (t2$16 = (t2$15 = this.widget.overlayColor, t2$15 == null ? null : t2$15.resolve(focusedStates)), t2$16 == null ? this.widget.focusColor : t2$16), t2$17 == null ? (t3$1 = themeData.radioTheme.overlayColor, t3$1 == null ? null : t3$1.resolve(focusedStates)) : t2$17), t2$18 == null ? themeData.focusColor : t2$18);
        let hoveredStates = (t2$19 = this[_states], (() => {
          t2$19.add(material_state.MaterialState.hovered);
          return t2$19;
        })());
        let effectiveHoverOverlayColor = (t2$23 = (t2$22 = (t2$21 = (t2$20 = this.widget.overlayColor, t2$20 == null ? null : t2$20.resolve(hoveredStates)), t2$21 == null ? this.widget.hoverColor : t2$21), t2$22 == null ? (t3$2 = themeData.radioTheme.overlayColor, t3$2 == null ? null : t3$2.resolve(hoveredStates)) : t2$22), t2$23 == null ? themeData.hoverColor : t2$23);
        let activePressedStates = (t2$24 = activeStates, (() => {
          t2$24.add(material_state.MaterialState.pressed);
          return t2$24;
        })());
        let effectiveActivePressedOverlayColor = (t2$27 = (t2$26 = (t2$25 = this.widget.overlayColor, t2$25 == null ? null : t2$25.resolve(activePressedStates)), t2$26 == null ? (t3$3 = themeData.radioTheme.overlayColor, t3$3 == null ? null : t3$3.resolve(activePressedStates)) : t2$26), t2$27 == null ? effectiveActiveColor.withAlpha(31) : t2$27);
        let inactivePressedStates = (t2$28 = inactiveStates, (() => {
          t2$28.add(material_state.MaterialState.pressed);
          return t2$28;
        })());
        let effectiveInactivePressedOverlayColor = (t2$31 = (t2$30 = (t2$29 = this.widget.overlayColor, t2$29 == null ? null : t2$29.resolve(inactivePressedStates)), t2$30 == null ? (t3$4 = themeData.radioTheme.overlayColor, t3$4 == null ? null : t3$4.resolve(inactivePressedStates)) : t2$30), t2$31 == null ? effectiveActiveColor.withAlpha(31) : t2$31);
        return new actions.FocusableActionDetector.new({actions: this[_actionMap], focusNode: this.widget.focusNode, autofocus: this.widget.autofocus, mouseCursor: effectiveMouseCursor, enabled: this.enabled, onShowFocusHighlight: dart.bind(this, _handleHighlightChanged), onShowHoverHighlight: dart.bind(this, _handleHoverChanged), child: new basic.Builder.new({builder: dart.fn(context => {
              let t2, t2$;
              if (context == null) dart.nullFailed(I[0], 512, 32, "context");
              return new radio._RadioRenderObjectWidget.new({selected: this[_selected], activeColor: effectiveActiveColor, inactiveColor: effectiveInactiveColor, focusColor: effectiveFocusOverlayColor, hoverColor: effectiveHoverOverlayColor, reactionColor: effectiveActivePressedOverlayColor, inactiveReactionColor: effectiveInactivePressedOverlayColor, splashRadius: (t2$ = (t2 = this.widget.splashRadius, t2 == null ? themeData.radioTheme.splashRadius : t2), t2$ == null ? 20 : t2$), onChanged: dart.test(this.enabled) ? dart.bind(this, _handleChanged) : null, toggleable: this.widget.toggleable, additionalConstraints: additionalConstraints, vsync: this, hasFocus: this[_focused], hovering: this[_hovering], $creationLocationd_0dea112b090073317d4: C[5] || CT.C5});
            }, T$.BuildContextTo_RadioRenderObjectWidget()), $creationLocationd_0dea112b090073317d4: C[21] || CT.C21}), $creationLocationd_0dea112b090073317d4: C[24] || CT.C24});
      }
    }
    (_RadioState.new = function() {
      this[___RadioState__actionMap] = null;
      this[___RadioState__actionMap_isSet] = false;
      this[_focused] = false;
      this[_hovering] = false;
      _RadioState.__proto__.new.call(this);
      ;
    }).prototype = _RadioState.prototype;
    dart.addTypeTests(_RadioState);
    _RadioState.prototype[_is__RadioState_default] = true;
    dart.addTypeCaches(_RadioState);
    dart.setMethodSignature(_RadioState, () => ({
      __proto__: dart.getMethods(_RadioState.__proto__),
      [_actionHandler]: dart.fnType(dart.void, [actions.ActivateIntent]),
      [_handleHighlightChanged]: dart.fnType(dart.void, [core.bool]),
      [_handleHoverChanged]: dart.fnType(dart.void, [core.bool]),
      [_handleChanged]: dart.fnType(dart.void, [dart.nullable(core.bool)]),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_RadioState, () => ({
      __proto__: dart.getGetters(_RadioState.__proto__),
      enabled: core.bool,
      [_actionMap]: core.Map$(core.Type, actions.Action$(actions.Intent)),
      [_selected]: core.bool,
      [_states]: core.Set$(material_state.MaterialState),
      [_widgetFillColor]: material_state.MaterialStateProperty$(dart.nullable(ui.Color)),
      [_defaultFillColor]: material_state.MaterialStateProperty$(ui.Color)
    }));
    dart.setSetterSignature(_RadioState, () => ({
      __proto__: dart.getSetters(_RadioState.__proto__),
      [_actionMap]: core.Map$(core.Type, actions.Action$(actions.Intent))
    }));
    dart.setLibraryUri(_RadioState, I[1]);
    dart.setFieldSignature(_RadioState, () => ({
      __proto__: dart.getFields(_RadioState.__proto__),
      [___RadioState__actionMap]: dart.fieldType(dart.nullable(core.Map$(core.Type, actions.Action$(actions.Intent)))),
      [___RadioState__actionMap_isSet]: dart.fieldType(core.bool),
      [_focused]: dart.fieldType(core.bool),
      [_hovering]: dart.fieldType(core.bool)
    }));
    return _RadioState;
  });
  radio._RadioState = radio._RadioState$();
  dart.addTypeTests(radio._RadioState, _is__RadioState_default);
  var selected$ = dart.privateName(radio, "_RadioRenderObjectWidget.selected");
  var hasFocus$ = dart.privateName(radio, "_RadioRenderObjectWidget.hasFocus");
  var hovering$ = dart.privateName(radio, "_RadioRenderObjectWidget.hovering");
  var inactiveColor$ = dart.privateName(radio, "_RadioRenderObjectWidget.inactiveColor");
  var activeColor$0 = dart.privateName(radio, "_RadioRenderObjectWidget.activeColor");
  var focusColor$0 = dart.privateName(radio, "_RadioRenderObjectWidget.focusColor");
  var hoverColor$0 = dart.privateName(radio, "_RadioRenderObjectWidget.hoverColor");
  var reactionColor$ = dart.privateName(radio, "_RadioRenderObjectWidget.reactionColor");
  var inactiveReactionColor$ = dart.privateName(radio, "_RadioRenderObjectWidget.inactiveReactionColor");
  var splashRadius$0 = dart.privateName(radio, "_RadioRenderObjectWidget.splashRadius");
  var onChanged$0 = dart.privateName(radio, "_RadioRenderObjectWidget.onChanged");
  var toggleable$0 = dart.privateName(radio, "_RadioRenderObjectWidget.toggleable");
  var vsync$ = dart.privateName(radio, "_RadioRenderObjectWidget.vsync");
  var additionalConstraints$ = dart.privateName(radio, "_RadioRenderObjectWidget.additionalConstraints");
  radio._RadioRenderObjectWidget = class _RadioRenderObjectWidget extends framework.LeafRenderObjectWidget {
    get selected() {
      return this[selected$];
    }
    set selected(value) {
      super.selected = value;
    }
    get hasFocus() {
      return this[hasFocus$];
    }
    set hasFocus(value) {
      super.hasFocus = value;
    }
    get hovering() {
      return this[hovering$];
    }
    set hovering(value) {
      super.hovering = value;
    }
    get inactiveColor() {
      return this[inactiveColor$];
    }
    set inactiveColor(value) {
      super.inactiveColor = value;
    }
    get activeColor() {
      return this[activeColor$0];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get focusColor() {
      return this[focusColor$0];
    }
    set focusColor(value) {
      super.focusColor = value;
    }
    get hoverColor() {
      return this[hoverColor$0];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get reactionColor() {
      return this[reactionColor$];
    }
    set reactionColor(value) {
      super.reactionColor = value;
    }
    get inactiveReactionColor() {
      return this[inactiveReactionColor$];
    }
    set inactiveReactionColor(value) {
      super.inactiveReactionColor = value;
    }
    get splashRadius() {
      return this[splashRadius$0];
    }
    set splashRadius(value) {
      super.splashRadius = value;
    }
    get onChanged() {
      return this[onChanged$0];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get toggleable() {
      return this[toggleable$0];
    }
    set toggleable(value) {
      super.toggleable = value;
    }
    get vsync() {
      return this[vsync$];
    }
    set vsync(value) {
      super.vsync = value;
    }
    get additionalConstraints() {
      return this[additionalConstraints$];
    }
    set additionalConstraints(value) {
      super.additionalConstraints = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 575, 48, "context");
      return new radio._RenderRadio.new({value: this.selected, activeColor: this.activeColor, inactiveColor: this.inactiveColor, focusColor: this.focusColor, hoverColor: this.hoverColor, reactionColor: this.reactionColor, inactiveReactionColor: this.inactiveReactionColor, splashRadius: this.splashRadius, onChanged: this.onChanged, tristate: this.toggleable, vsync: this.vsync, additionalConstraints: this.additionalConstraints, hasFocus: this.hasFocus, hovering: this.hovering});
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 593, 40, "context");
      radio._RenderRadio.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 593, 62, "renderObject");
      t2 = renderObject;
      (() => {
        t2.value = this.selected;
        t2.activeColor = this.activeColor;
        t2.inactiveColor = this.inactiveColor;
        t2.focusColor = this.focusColor;
        t2.hoverColor = this.hoverColor;
        t2.reactionColor = this.reactionColor;
        t2.inactiveReactionColor = this.inactiveReactionColor;
        t2.splashRadius = this.splashRadius;
        t2.onChanged = this.onChanged;
        t2.tristate = this.toggleable;
        t2.additionalConstraints = this.additionalConstraints;
        t2.vsync = this.vsync;
        t2.hasFocus = this.hasFocus;
        t2.hovering = this.hovering;
        return t2;
      })();
    }
  };
  (radio._RadioRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let selected = opts && 'selected' in opts ? opts.selected : null;
    if (selected == null) dart.nullFailed(I[0], 538, 19, "selected");
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    if (activeColor == null) dart.nullFailed(I[0], 539, 19, "activeColor");
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    if (inactiveColor == null) dart.nullFailed(I[0], 540, 19, "inactiveColor");
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    if (focusColor == null) dart.nullFailed(I[0], 541, 19, "focusColor");
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    if (hoverColor == null) dart.nullFailed(I[0], 542, 19, "hoverColor");
    let reactionColor = opts && 'reactionColor' in opts ? opts.reactionColor : null;
    if (reactionColor == null) dart.nullFailed(I[0], 543, 19, "reactionColor");
    let inactiveReactionColor = opts && 'inactiveReactionColor' in opts ? opts.inactiveReactionColor : null;
    if (inactiveReactionColor == null) dart.nullFailed(I[0], 544, 19, "inactiveReactionColor");
    let additionalConstraints = opts && 'additionalConstraints' in opts ? opts.additionalConstraints : null;
    if (additionalConstraints == null) dart.nullFailed(I[0], 545, 19, "additionalConstraints");
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let toggleable = opts && 'toggleable' in opts ? opts.toggleable : null;
    if (toggleable == null) dart.nullFailed(I[0], 547, 19, "toggleable");
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    if (vsync == null) dart.nullFailed(I[0], 548, 19, "vsync");
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
    if (hasFocus == null) dart.nullFailed(I[0], 549, 19, "hasFocus");
    let hovering = opts && 'hovering' in opts ? opts.hovering : null;
    if (hovering == null) dart.nullFailed(I[0], 550, 19, "hovering");
    let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
    if (splashRadius == null) dart.nullFailed(I[0], 551, 19, "splashRadius");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[selected$] = selected;
    this[activeColor$0] = activeColor;
    this[inactiveColor$] = inactiveColor;
    this[focusColor$0] = focusColor;
    this[hoverColor$0] = hoverColor;
    this[reactionColor$] = reactionColor;
    this[inactiveReactionColor$] = inactiveReactionColor;
    this[additionalConstraints$] = additionalConstraints;
    this[onChanged$0] = onChanged;
    this[toggleable$0] = toggleable;
    this[vsync$] = vsync;
    this[hasFocus$] = hasFocus;
    this[hovering$] = hovering;
    this[splashRadius$0] = splashRadius;
    if (!(selected != null)) dart.assertFailed(null, I[0], 552, 15, "selected != null");
    if (!(activeColor != null)) dart.assertFailed(null, I[0], 553, 15, "activeColor != null");
    if (!(inactiveColor != null)) dart.assertFailed(null, I[0], 554, 15, "inactiveColor != null");
    if (!(vsync != null)) dart.assertFailed(null, I[0], 555, 15, "vsync != null");
    if (!(toggleable != null)) dart.assertFailed(null, I[0], 556, 15, "toggleable != null");
    radio._RadioRenderObjectWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = radio._RadioRenderObjectWidget.prototype;
  dart.addTypeTests(radio._RadioRenderObjectWidget);
  dart.addTypeCaches(radio._RadioRenderObjectWidget);
  dart.setMethodSignature(radio._RadioRenderObjectWidget, () => ({
    __proto__: dart.getMethods(radio._RadioRenderObjectWidget.__proto__),
    createRenderObject: dart.fnType(radio._RenderRadio, [framework.BuildContext])
  }));
  dart.setLibraryUri(radio._RadioRenderObjectWidget, I[1]);
  dart.setFieldSignature(radio._RadioRenderObjectWidget, () => ({
    __proto__: dart.getFields(radio._RadioRenderObjectWidget.__proto__),
    selected: dart.finalFieldType(core.bool),
    hasFocus: dart.finalFieldType(core.bool),
    hovering: dart.finalFieldType(core.bool),
    inactiveColor: dart.finalFieldType(ui.Color),
    activeColor: dart.finalFieldType(ui.Color),
    focusColor: dart.finalFieldType(ui.Color),
    hoverColor: dart.finalFieldType(ui.Color),
    reactionColor: dart.finalFieldType(ui.Color),
    inactiveReactionColor: dart.finalFieldType(ui.Color),
    splashRadius: dart.finalFieldType(core.double),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.bool)]))),
    toggleable: dart.finalFieldType(core.bool),
    vsync: dart.finalFieldType(ticker.TickerProvider),
    additionalConstraints: dart.finalFieldType(box.BoxConstraints)
  }));
  radio._RenderRadio = class _RenderRadio extends toggleable.RenderToggleable {
    paint(context, offset) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 646, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 646, 46, "offset");
      let canvas = context.canvas;
      this.paintRadialReaction(canvas, offset, this.size.center(ui.Offset.zero));
      let center = offset['&'](this.size).center;
      let paint = (t2 = ui.Paint.new(), (() => {
        t2.color = dart.nullCheck(ui.Color.lerp(this.inactiveColor, this.activeColor, this.position.value));
        t2.style = ui.PaintingStyle.stroke;
        t2.strokeWidth = 2.0;
        return t2;
      })());
      canvas.drawCircle(center, 8, paint);
      if (!dart.test(this.position.isDismissed)) {
        paint.style = ui.PaintingStyle.fill;
        canvas.drawCircle(center, 4.5 * dart.notNull(this.position.value), paint);
      }
    }
    describeSemanticsConfiguration(config) {
      let t2;
      if (config == null) dart.nullFailed(I[0], 668, 62, "config");
      super.describeSemanticsConfiguration(config);
      t2 = config;
      (() => {
        t2.isInMutuallyExclusiveGroup = true;
        t2.isChecked = this.value === true;
        return t2;
      })();
    }
  };
  (radio._RenderRadio.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[0], 614, 19, "value");
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    if (activeColor == null) dart.nullFailed(I[0], 615, 20, "activeColor");
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    if (inactiveColor == null) dart.nullFailed(I[0], 616, 20, "inactiveColor");
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    if (focusColor == null) dart.nullFailed(I[0], 617, 20, "focusColor");
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    if (hoverColor == null) dart.nullFailed(I[0], 618, 20, "hoverColor");
    let reactionColor = opts && 'reactionColor' in opts ? opts.reactionColor : null;
    if (reactionColor == null) dart.nullFailed(I[0], 619, 20, "reactionColor");
    let inactiveReactionColor = opts && 'inactiveReactionColor' in opts ? opts.inactiveReactionColor : null;
    if (inactiveReactionColor == null) dart.nullFailed(I[0], 620, 20, "inactiveReactionColor");
    let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
    if (splashRadius == null) dart.nullFailed(I[0], 621, 21, "splashRadius");
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let tristate = opts && 'tristate' in opts ? opts.tristate : null;
    if (tristate == null) dart.nullFailed(I[0], 623, 19, "tristate");
    let additionalConstraints = opts && 'additionalConstraints' in opts ? opts.additionalConstraints : null;
    if (additionalConstraints == null) dart.nullFailed(I[0], 624, 29, "additionalConstraints");
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    if (vsync == null) dart.nullFailed(I[0], 625, 29, "vsync");
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
    if (hasFocus == null) dart.nullFailed(I[0], 626, 19, "hasFocus");
    let hovering = opts && 'hovering' in opts ? opts.hovering : null;
    if (hovering == null) dart.nullFailed(I[0], 627, 19, "hovering");
    radio._RenderRadio.__proto__.new.call(this, {value: value, activeColor: activeColor, inactiveColor: inactiveColor, focusColor: focusColor, hoverColor: hoverColor, reactionColor: reactionColor, inactiveReactionColor: inactiveReactionColor, splashRadius: splashRadius, onChanged: onChanged, tristate: tristate, additionalConstraints: additionalConstraints, vsync: vsync, hasFocus: hasFocus, hovering: hovering});
    ;
  }).prototype = radio._RenderRadio.prototype;
  dart.addTypeTests(radio._RenderRadio);
  dart.addTypeCaches(radio._RenderRadio);
  dart.setLibraryUri(radio._RenderRadio, I[1]);
  dart.defineLazy(radio, {
    /*radio._kOuterRadius*/get _kOuterRadius() {
      return 8;
    },
    /*radio._kInnerRadius*/get _kInnerRadius() {
      return 4.5;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/radio.dart", {
    "package:flutter/src/material/radio.dart": radio
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["radio.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgIU;;;;;;MAMC;;;;;;MA4Be;;;;;;MAuBL;;;;;;MA+DR;;;;;;MAQE;;;;;;MAkBwB;;;;;;MAaR;;;;;;MAeR;;;;;;MAUR;;;;;;MAUA;;;;;;MAmBwB;;;;;;MAQvB;;;;;;MAGG;;;;;;MAGN;;;;;;;AAGqB;MAAgB;;;UA3PzC;UACS;UACA;UACA;UACT;UACA;;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;MAdS;MACA;MACA;MACT;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;YACK,AAAU,SAAD;YACT,AAAW,UAAD;AACjB,2CAAW,GAAG;;IAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6OA,cAAiB,gBAAjB,AAAO;MAAiB;;;AACb;MAAU;;;AAAV;;MAAU;;AAItB,QAAX;AAKL,QAJD,mBAAmC,uFACjB,mEACJ;MAGhB;;YAEmC;AACjC,YAAqB,eAAjB,AAAO;AACsB,UAAf,AAAC,8BAAjB,AAAO,wBAAW,AAAO;;AAER,2BAAyC,eAA1B,AAAQ;AACe,QAAzD,AAAa,YAAD;MACd;;YAGkC;AAChC,YAAI,AAAS,kBAAG,OAAO;AACe,UAApC,cAAS;AAAuB,YAAlB,iBAAW,OAAO;;;MAEpC;;YAG8B;AAC5B,YAAI,AAAU,mBAAG,QAAQ;AACe,UAAtC,cAAS;AAAyB,YAApB,kBAAY,QAAQ;;;MAEtC;uBAE0B;AACxB,YAAI,AAAS,QAAD;AACa,UAAP,AAAC,8BAAjB,AAAO,wBAAW;AAClB;;AAEF,sBAAI,QAAQ;AACqB,UAAf,AAAC,8BAAjB,AAAO,wBAAW,AAAO;;MAE7B;;AAEsB,cAAa,aAAb,AAAO,mBAAS,AAAO;MAAU;;AAErB,cAAe;;AAC/C,yBAAK,eAAuB;AAC5B,wBAAI,kBAAyB;AAC7B,wBAAI,iBAAwB;AAC5B,wBAAI,kBAAyB;;;MAC9B;;AAGC,cAA6B,+DAAY;cAAoB;AAC3D,wBAAI,AAAO,MAAD,UAAwB;AAChC,kBAAO;;AAET,wBAAI,AAAO,MAAD,UAAwB;AAChC,kBAAO,AAAO;;AAEhB,gBAAO;;MAEX;;AAGkB,wBAAkB,eAAG;AACrC,cAA6B,4DAAY;cAAoB;AAC3D,wBAAI,AAAO,MAAD,UAAwB;AAChC,kBAAO,AAAU,UAAD;;AAElB,wBAAI,AAAO,MAAD,UAAwB;AAChC,kBAAO,AAAU,UAAD;;AAElB,gBAAO,AAAU,UAAD;;MAEpB;YAG0B;;;AACxB,uBAAO,4BAAsB,OAAO;AACpB,wBAAkB,eAAG,OAAO;AAChB,8CAE1B,OADA,KAD2D,AAAO,mCAAA,aAC/D,AAAU,AAAW,SAAZ,yCAAZ,cACG,AAAU,SAAD;AACM,sCAElB,QADA,OAD2C,AAAO,2BAAA,eAC/C,AAAU,AAAW,SAAZ,mCAAZ,eACG,AAAU,SAAD;AACT;AACL,gBAAQ,8BAA8B;;;AAEmC,YAArE;AACA;;;;AAEiF,YAAjF;AACA;;;;AANJ;;;AAQiD,QAAjD,OAAA,AAAK,IAAD,MAAI,AAAuB,sBAAD;AACT,oCAAuC,6BAAM,IAAI;AACpD,oCAEhB,QADA,OAD6D,kEAAwB,AAAO,yBAAa,gBAA5C,qBAC1D,AAAU,AAAW,SAAZ,sCAAY,OAAa,WAAQ,yBAA7C,eACyB,yEAAgD,mDAAW;AAI7D,kDAAe;AAAS,mBAAkB;;;AAC1C,oDAAiB;AAAS,sBAAqB;;;AAC5D,oCAGV,QADA,QADA,eADiC,AAAO,sCAAA,OAAW,aAAQ,YAAY,IAA/B,eACrC,AAAiB,+BAAQ,YAAY,WAAxC,sBACG,AAAU,AAAW,SAAZ,qCAAY,OAAW,YAAQ,YAAY,YAAvD,eACG,AAAkB,gCAAQ,YAAY;AAC/B,sCAGV,SADA,SADA,iBADmC,AAAO,uCAAA,OAAW,cAAQ,cAAc,IAAjC,gBACvC,AAAiB,+BAAQ,cAAc,YAA1C,wBACG,AAAU,AAAW,SAAZ,sCAAY,OAAW,aAAQ,cAAc,aAAzD,gBACG,AAAkB,gCAAQ,cAAc;AAEpB,oDAAgB;AAAS,oBAAkB;;;AACxD,0CAGV,SADA,SADA,iBADuC,AAAO,0CAAA,OAAc,cAAQ,aAAa,IAAnC,gBAC3C,AAAO,iCAAV,wBACG,AAAU,AAAW,SAAZ,yCAAY,OAAc,aAAQ,aAAa,aAA3D,gBACG,AAAU,SAAD;AAEW,oDAAgB;AAAS,oBAAkB;;;AACxD,0CAGR,SADA,SADA,iBADqC,AAAO,0CAAA,OAAc,cAAQ,aAAa,IAAnC,gBACzC,AAAO,iCAAV,wBACG,AAAU,AAAW,SAAZ,yCAAY,OAAc,aAAQ,aAAa,aAA3D,gBACG,AAAU,SAAD;AAES,2CAAsB,YAAY,EAAZ;AAAc,oBAAkB;;;AACnE,kDAER,SADA,iBAD6C,AAAO,0CAAA,OAAc,cAAQ,mBAAmB,IAAzC,wBACjD,AAAU,AAAW,SAAZ,yCAAY,OAAc,aAAQ,mBAAmB,aAAjE,gBACG,AAAqB,oBAAD;AAEF,6CAAwB,cAAc,EAAd;AAAgB,oBAAkB;;;AACvE,oDAER,SADA,iBAD+C,AAAO,0CAAA,OAAc,cAAQ,qBAAqB,IAA3C,wBACnD,AAAU,AAAW,SAAZ,yCAAY,OAAc,aAAQ,qBAAqB,aAAnE,gBACG,AAAqB,oBAAD;AAG3B,cAAO,mDACI,6BACE,AAAO,kCACP,AAAO,oCACL,oBAAoB,WACxB,8CACa,gEACA,mCACf,gCACI,QAAc;;;AACrB,oBAAO,mDACK,8BACG,oBAAoB,iBAClB,sBAAsB,cACzB,0BAA0B,cAC1B,0BAA0B,iBACvB,kCAAkC,yBAC1B,oCAAoC,iBACY,OAArC,KAApB,AAAO,0BAAA,aAAgB,AAAU,AAAW,SAAZ,gCAAZ,8CACvB,0BAAU,wBAAiB,kBAC1B,AAAO,+CACI,qBAAqB,SACrC,gBACG,0BACA;;MAKpB;;;uCAxK+B;;MAoB1B,iBAAW;MAOX,kBAAY;;;IA8InB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0Ba;;;;;;IACA;;;;;;IACA;;;;;;IACC;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACC;;;;;;IACc;;;;;;IAChB;;;;;;IACU;;;;;;IACA;;;;;;;UAGwB;AAAY,gDAChD,4BACM,iCACE,gCACH,6BACA,gCACG,2CACQ,0CACT,8BACH,0BACD,wBACH,mCACgB,sCACb,yBACA;IACX;uBAGoC,SAAsB;;UAAtB;4BAAsB;;AAelC,WAdvB,YAAY;MAAZ;AACI,mBAAQ;AACR,yBAAc;AACd,2BAAgB;AAChB,wBAAa;AACb,wBAAa;AACb,2BAAgB;AAChB,mCAAwB;AACxB,0BAAe;AACf,uBAAY;AACZ,sBAAW;AACX,mCAAwB;AACxB,mBAAQ;AACR,sBAAW;AACX,sBAAW;;;IACjB;;;QAxEO;QACS;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACT;QACS;;QACA;;QACA;;QACA;;QACA;;;IAbA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACT;IACS;IACA;IACA;IACA;IACA;UACJ,AAAS,QAAD;UACR,AAAY,WAAD;UACX,AAAc,aAAD;UACb,AAAM,KAAD;UACL,AAAW,UAAD;AACjB,kEAAW,GAAG;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;UAyFO,SAAgB;;UAAhB;UAAgB;AAC5B,mBAAS,AAAQ,OAAD;AAEgC,MAA7D,yBAAoB,MAAM,EAAE,MAAM,EAAE,AAAK,iBAAc;AAE1C,mBAAU,AAAO,AAAQ,MAAT,MAAG;AAGpB,wCAAQ;AAChB,mBAA8D,eAAhD,cAAK,oBAAe,kBAAa,AAAS;AACxD,mBAAsB;AACtB,yBAAc;;;AAC6B,MAA/C,AAAO,MAAD,YAAY,MAAM,KAAiB,KAAK;AAG9C,qBAAK,AAAS;AACoB,QAAhC,AAAM,KAAD,SAAuB;AACoC,QAAhE,AAAO,MAAD,YAAY,MAAM,EAAgB,mBAAE,AAAS,sBAAO,KAAK;;IAEnE;mCAG2D;;;AACb,MAAtC,qCAA+B,MAAM;AAGd,WAF7B,MAAM;MAAN;AACI,wCAA6B;AAC7B,uBAAY,AAAM,eAAG;;;IAC3B;;;QA3DgB;;QACC;;QACA;;QACA;;QACA;;QACA;;QACA;;QACC;;QACc;QAChB;;QACU;;QACA;;QACV;;QACA;;AACX,wDACS,KAAK,eACC,WAAW,iBACT,aAAa,cAChB,UAAU,cACV,UAAU,iBACP,aAAa,yBACL,qBAAqB,gBAC9B,YAAY,aACf,SAAS,YACV,QAAQ,yBACK,qBAAqB,SACrC,KAAK,YACF,QAAQ,YACR,QAAQ;;EACnB;;;;;MAlnBK,mBAAa;;;MACb,mBAAa","file":"../../../../../../../../D:/packages/flutter/src/material/radio.dart.lib.js"}');
  // Exports:
  return {
    src__material__radio: radio
  };
}));

//# sourceMappingURL=radio.dart.lib.js.map
