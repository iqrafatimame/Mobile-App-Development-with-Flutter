define(['dart_sdk', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/semantics/semantics_event.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/cupertino/switch.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/gestures/monodrag.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/painting/box_decoration.dart', 'packages/flutter/src/painting/decoration_image.dart', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/material/shadows.dart', 'packages/flutter/src/material/toggleable.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/painting/decoration.dart'], (function load__packages__flutter__src__material__switch_dart(dart_sdk, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__semantics__semantics_event$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__cupertino__switch$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__gestures__monodrag$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__painting__box_decoration$46dart, packages__flutter__src__painting__decoration_image$46dart, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__material__shadows$46dart, packages__flutter__src__material__toggleable$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__painting__decoration$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const actions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__actions;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const image = packages__flutter__src__widgets__widget_span$46dart.src__widgets__image;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const focus_scope = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_scope;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const debug = packages__flutter__src__material__icon_button$46dart.src__material__debug;
  const mouse_cursor = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_cursor;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const semantics_event = packages__flutter__src__semantics__semantics_event$46dart.src__semantics__semantics_event;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const $switch = packages__flutter__src__cupertino__switch$46dart.src__cupertino__switch;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const monodrag = packages__flutter__src__gestures__monodrag$46dart.src__gestures__monodrag;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const box_decoration = packages__flutter__src__painting__box_decoration$46dart.src__painting__box_decoration;
  const decoration_image = packages__flutter__src__painting__decoration_image$46dart.src__painting__decoration_image;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const shadows = packages__flutter__src__material__shadows$46dart.src__material__shadows;
  const toggleable = packages__flutter__src__material__toggleable$46dart.src__material__toggleable;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const decoration = packages__flutter__src__painting__decoration$46dart.src__painting__decoration;
  var $switch$ = Object.create(dart.library);
  var $_get = dartx._get;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    _SwitchTypeL: () => (T._SwitchTypeL = dart.constFn(dart.legacy($switch$._SwitchType)))(),
    boolTovoid: () => (T.boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))(),
    ObjectFlagPropertyOfboolTovoid: () => (T.ObjectFlagPropertyOfboolTovoid = dart.constFn(diagnostics.ObjectFlagProperty$(T.boolTovoid())))(),
    CallbackActionOfActivateIntent: () => (T.CallbackActionOfActivateIntent = dart.constFn(actions.CallbackAction$(actions.ActivateIntent)))(),
    ActionOfIntent: () => (T.ActionOfIntent = dart.constFn(actions.Action$(actions.Intent)))(),
    LinkedMapOfType$ActionOfIntent: () => (T.LinkedMapOfType$ActionOfIntent = dart.constFn(_js_helper.LinkedMap$(core.Type, T.ActionOfIntent())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    LinkedHashSetOfMaterialState: () => (T.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(material_state.MaterialState)))(),
    ColorN: () => (T.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    SetOfMaterialState: () => (T.SetOfMaterialState = dart.constFn(core.Set$(material_state.MaterialState)))(),
    SetOfMaterialStateToColorN: () => (T.SetOfMaterialStateToColorN = dart.constFn(dart.fnType(T.ColorN(), [T.SetOfMaterialState()])))(),
    SetOfMaterialStateToColor: () => (T.SetOfMaterialStateToColor = dart.constFn(dart.fnType(ui.Color, [T.SetOfMaterialState()])))(),
    MouseCursorN: () => (T.MouseCursorN = dart.constFn(dart.nullable(mouse_cursor.MouseCursor)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    BuildContextTo_SwitchRenderObjectWidget: () => (T.BuildContextTo_SwitchRenderObjectWidget = dart.constFn(dart.fnType($switch$._SwitchRenderObjectWidget, [framework.BuildContext])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: $switch$._SwitchType.prototype,
        [_name$]: "_SwitchType.material",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: $switch$._SwitchType.prototype,
        [_name$]: "_SwitchType.adaptive",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], T._SwitchTypeL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: semantics_event.TapSemanticEvent.prototype,
        [SemanticsEvent_type]: "tap"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 48,
        [OffsetBase__dx]: 59
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_name$0]: "MaterialTapTargetSize.padded",
        index: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 40,
        [OffsetBase__dx]: 59
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_name$0]: "MaterialTapTargetSize.shrinkWrap",
        index: 1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1375731712
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dragStartBehavior",
        [_Location_column]: 13,
        [_Location_line]: 554,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "value",
        [_Location_column]: 13,
        [_Location_line]: 555,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeColor",
        [_Location_column]: 13,
        [_Location_line]: 556,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inactiveColor",
        [_Location_column]: 13,
        [_Location_line]: 557,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "surfaceColor",
        [_Location_column]: 13,
        [_Location_line]: 558,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusColor",
        [_Location_column]: 13,
        [_Location_line]: 559,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 13,
        [_Location_line]: 560,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "reactionColor",
        [_Location_column]: 13,
        [_Location_line]: 561,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inactiveReactionColor",
        [_Location_column]: 13,
        [_Location_line]: 562,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "splashRadius",
        [_Location_column]: 13,
        [_Location_line]: 563,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeThumbImage",
        [_Location_column]: 13,
        [_Location_line]: 564,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onActiveThumbImageError",
        [_Location_column]: 13,
        [_Location_line]: 565,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inactiveThumbImage",
        [_Location_column]: 13,
        [_Location_line]: 566,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onInactiveThumbImageError",
        [_Location_column]: 13,
        [_Location_line]: 567,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeTrackColor",
        [_Location_column]: 13,
        [_Location_line]: 568,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inactiveTrackColor",
        [_Location_column]: 13,
        [_Location_line]: 569,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "configuration",
        [_Location_column]: 13,
        [_Location_line]: 570,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChanged",
        [_Location_column]: 13,
        [_Location_line]: 571,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "additionalConstraints",
        [_Location_column]: 13,
        [_Location_line]: 572,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hasFocus",
        [_Location_column]: 13,
        [_Location_line]: 573,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hovering",
        [_Location_column]: 13,
        [_Location_line]: 574,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "state",
        [_Location_column]: 13,
        [_Location_line]: 575,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.constList([C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33], T._LocationL());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[11] || CT.C11,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 553,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/switch.dart"
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 552,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.constList([C[36] || CT.C36], T._LocationL());
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[35] || CT.C35,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 551,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/switch.dart"
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "actions",
        [_Location_column]: 7,
        [_Location_line]: 544,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 545,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 546,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enabled",
        [_Location_column]: 7,
        [_Location_line]: 547,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onShowFocusHighlight",
        [_Location_column]: 7,
        [_Location_line]: 548,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onShowHoverHighlight",
        [_Location_column]: 7,
        [_Location_line]: 549,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseCursor",
        [_Location_column]: 7,
        [_Location_line]: 550,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 551,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.constList([C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46], T._LocationL());
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[38] || CT.C38,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 543,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/switch.dart"
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dragStartBehavior",
        [_Location_column]: 11,
        [_Location_line]: 592,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "value",
        [_Location_column]: 11,
        [_Location_line]: 593,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChanged",
        [_Location_column]: 11,
        [_Location_line]: 594,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeColor",
        [_Location_column]: 11,
        [_Location_line]: 595,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "trackColor",
        [_Location_column]: 11,
        [_Location_line]: 596,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.constList([C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53], T._LocationL());
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[48] || CT.C48,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 591,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/switch.dart"
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 588,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 589,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 9,
        [_Location_line]: 590,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 591,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.constList([C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], T._LocationL());
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[55] || CT.C55,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 587,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/switch.dart"
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 585,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 586,
        [_Location_file]: null
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 587,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.constList([C[62] || CT.C62, C[63] || CT.C63, C[64] || CT.C64], T._LocationL());
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[61] || CT.C61,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 584,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/switch.dart"
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.android",
        index: 0
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.fuchsia",
        index: 1
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.windows",
        index: 5
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.iOS",
        index: 2
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$2]: "TextDirection.rtl",
        index: 0
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$2]: "TextDirection.ltr",
        index: 1
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 7,
        [Radius_x]: 7
      });
    }
  }, false);
  var C = Array(74).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/material/switch.dart",
    "package:flutter/src/material/switch.dart"
  ];
  var _name$ = dart.privateName($switch$, "_name");
  $switch$._SwitchType = class _SwitchType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  ($switch$._SwitchType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 29, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 29, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = $switch$._SwitchType.prototype;
  dart.addTypeTests($switch$._SwitchType);
  dart.addTypeCaches($switch$._SwitchType);
  dart.setLibraryUri($switch$._SwitchType, I[1]);
  dart.setFieldSignature($switch$._SwitchType, () => ({
    __proto__: dart.getFields($switch$._SwitchType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods($switch$._SwitchType, ['toString']);
  $switch$._SwitchType.material = C[0] || CT.C0;
  $switch$._SwitchType.adaptive = C[1] || CT.C1;
  $switch$._SwitchType.values = C[2] || CT.C2;
  var value$ = dart.privateName($switch$, "Switch.value");
  var onChanged$ = dart.privateName($switch$, "Switch.onChanged");
  var activeColor$ = dart.privateName($switch$, "Switch.activeColor");
  var activeTrackColor$ = dart.privateName($switch$, "Switch.activeTrackColor");
  var inactiveThumbColor$ = dart.privateName($switch$, "Switch.inactiveThumbColor");
  var inactiveTrackColor$ = dart.privateName($switch$, "Switch.inactiveTrackColor");
  var activeThumbImage$ = dart.privateName($switch$, "Switch.activeThumbImage");
  var onActiveThumbImageError$ = dart.privateName($switch$, "Switch.onActiveThumbImageError");
  var inactiveThumbImage$ = dart.privateName($switch$, "Switch.inactiveThumbImage");
  var onInactiveThumbImageError$ = dart.privateName($switch$, "Switch.onInactiveThumbImageError");
  var thumbColor$ = dart.privateName($switch$, "Switch.thumbColor");
  var trackColor$ = dart.privateName($switch$, "Switch.trackColor");
  var materialTapTargetSize$ = dart.privateName($switch$, "Switch.materialTapTargetSize");
  var _switchType = dart.privateName($switch$, "Switch._switchType");
  var dragStartBehavior$ = dart.privateName($switch$, "Switch.dragStartBehavior");
  var mouseCursor$ = dart.privateName($switch$, "Switch.mouseCursor");
  var focusColor$ = dart.privateName($switch$, "Switch.focusColor");
  var hoverColor$ = dart.privateName($switch$, "Switch.hoverColor");
  var overlayColor$ = dart.privateName($switch$, "Switch.overlayColor");
  var splashRadius$ = dart.privateName($switch$, "Switch.splashRadius");
  var focusNode$ = dart.privateName($switch$, "Switch.focusNode");
  var autofocus$ = dart.privateName($switch$, "Switch.autofocus");
  var _name = dart.privateName(recognizer, "_name");
  var _switchType$ = dart.privateName($switch$, "_switchType");
  $switch$.Switch = class Switch extends framework.StatefulWidget {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get onChanged() {
      return this[onChanged$];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get activeColor() {
      return this[activeColor$];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get activeTrackColor() {
      return this[activeTrackColor$];
    }
    set activeTrackColor(value) {
      super.activeTrackColor = value;
    }
    get inactiveThumbColor() {
      return this[inactiveThumbColor$];
    }
    set inactiveThumbColor(value) {
      super.inactiveThumbColor = value;
    }
    get inactiveTrackColor() {
      return this[inactiveTrackColor$];
    }
    set inactiveTrackColor(value) {
      super.inactiveTrackColor = value;
    }
    get activeThumbImage() {
      return this[activeThumbImage$];
    }
    set activeThumbImage(value) {
      super.activeThumbImage = value;
    }
    get onActiveThumbImageError() {
      return this[onActiveThumbImageError$];
    }
    set onActiveThumbImageError(value) {
      super.onActiveThumbImageError = value;
    }
    get inactiveThumbImage() {
      return this[inactiveThumbImage$];
    }
    set inactiveThumbImage(value) {
      super.inactiveThumbImage = value;
    }
    get onInactiveThumbImageError() {
      return this[onInactiveThumbImageError$];
    }
    set onInactiveThumbImageError(value) {
      super.onInactiveThumbImageError = value;
    }
    get thumbColor() {
      return this[thumbColor$];
    }
    set thumbColor(value) {
      super.thumbColor = value;
    }
    get trackColor() {
      return this[trackColor$];
    }
    set trackColor(value) {
      super.trackColor = value;
    }
    get materialTapTargetSize() {
      return this[materialTapTargetSize$];
    }
    set materialTapTargetSize(value) {
      super.materialTapTargetSize = value;
    }
    get [_switchType$]() {
      return this[_switchType];
    }
    set [_switchType$](value) {
      super[_switchType$] = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get mouseCursor() {
      return this[mouseCursor$];
    }
    set mouseCursor(value) {
      super.mouseCursor = value;
    }
    get focusColor() {
      return this[focusColor$];
    }
    set focusColor(value) {
      super.focusColor = value;
    }
    get hoverColor() {
      return this[hoverColor$];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get overlayColor() {
      return this[overlayColor$];
    }
    set overlayColor(value) {
      super.overlayColor = value;
    }
    get splashRadius() {
      return this[splashRadius$];
    }
    set splashRadius(value) {
      super.splashRadius = value;
    }
    get focusNode() {
      return this[focusNode$];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get autofocus() {
      return this[autofocus$];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    createState() {
      return new $switch$._SwitchState.new();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 367, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("value", {value: this.value, ifTrue: "on", ifFalse: "off", showName: true}));
      properties.add(new (T.ObjectFlagPropertyOfboolTovoid()).new("onChanged", this.onChanged, {ifNull: "disabled"}));
    }
  };
  ($switch$.Switch.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[0], 69, 19, "value");
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
    let inactiveThumbColor = opts && 'inactiveThumbColor' in opts ? opts.inactiveThumbColor : null;
    let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
    let activeThumbImage = opts && 'activeThumbImage' in opts ? opts.activeThumbImage : null;
    let onActiveThumbImageError = opts && 'onActiveThumbImageError' in opts ? opts.onActiveThumbImageError : null;
    let inactiveThumbImage = opts && 'inactiveThumbImage' in opts ? opts.inactiveThumbImage : null;
    let onInactiveThumbImageError = opts && 'onInactiveThumbImageError' in opts ? opts.onInactiveThumbImageError : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
    if (dragStartBehavior == null) dart.nullFailed(I[0], 82, 10, "dragStartBehavior");
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
    let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    if (autofocus == null) dart.nullFailed(I[0], 89, 10, "autofocus");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[value$] = value;
    this[onChanged$] = onChanged;
    this[activeColor$] = activeColor;
    this[activeTrackColor$] = activeTrackColor;
    this[inactiveThumbColor$] = inactiveThumbColor;
    this[inactiveTrackColor$] = inactiveTrackColor;
    this[activeThumbImage$] = activeThumbImage;
    this[onActiveThumbImageError$] = onActiveThumbImageError;
    this[inactiveThumbImage$] = inactiveThumbImage;
    this[onInactiveThumbImageError$] = onInactiveThumbImageError;
    this[thumbColor$] = thumbColor;
    this[trackColor$] = trackColor;
    this[materialTapTargetSize$] = materialTapTargetSize;
    this[dragStartBehavior$] = dragStartBehavior;
    this[mouseCursor$] = mouseCursor;
    this[focusColor$] = focusColor;
    this[hoverColor$] = hoverColor;
    this[overlayColor$] = overlayColor;
    this[splashRadius$] = splashRadius;
    this[focusNode$] = focusNode;
    this[autofocus$] = autofocus;
    this[_switchType] = $switch$._SwitchType.material;
    if (!(dragStartBehavior != null)) dart.assertFailed(null, I[0], 91, 16, "dragStartBehavior != null");
    if (!(activeThumbImage != null || onActiveThumbImageError == null)) dart.assertFailed(null, I[0], 92, 16, "activeThumbImage != null || onActiveThumbImageError == null");
    if (!(inactiveThumbImage != null || onInactiveThumbImageError == null)) dart.assertFailed(null, I[0], 93, 16, "inactiveThumbImage != null || onInactiveThumbImageError == null");
    $switch$.Switch.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = $switch$.Switch.prototype;
  ($switch$.Switch.adaptive = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[0], 113, 19, "value");
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
    let inactiveThumbColor = opts && 'inactiveThumbColor' in opts ? opts.inactiveThumbColor : null;
    let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
    let activeThumbImage = opts && 'activeThumbImage' in opts ? opts.activeThumbImage : null;
    let onActiveThumbImageError = opts && 'onActiveThumbImageError' in opts ? opts.onActiveThumbImageError : null;
    let inactiveThumbImage = opts && 'inactiveThumbImage' in opts ? opts.inactiveThumbImage : null;
    let onInactiveThumbImageError = opts && 'onInactiveThumbImageError' in opts ? opts.onInactiveThumbImageError : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
    if (dragStartBehavior == null) dart.nullFailed(I[0], 126, 10, "dragStartBehavior");
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
    let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    if (autofocus == null) dart.nullFailed(I[0], 133, 10, "autofocus");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[value$] = value;
    this[onChanged$] = onChanged;
    this[activeColor$] = activeColor;
    this[activeTrackColor$] = activeTrackColor;
    this[inactiveThumbColor$] = inactiveThumbColor;
    this[inactiveTrackColor$] = inactiveTrackColor;
    this[activeThumbImage$] = activeThumbImage;
    this[onActiveThumbImageError$] = onActiveThumbImageError;
    this[inactiveThumbImage$] = inactiveThumbImage;
    this[onInactiveThumbImageError$] = onInactiveThumbImageError;
    this[materialTapTargetSize$] = materialTapTargetSize;
    this[thumbColor$] = thumbColor;
    this[trackColor$] = trackColor;
    this[dragStartBehavior$] = dragStartBehavior;
    this[mouseCursor$] = mouseCursor;
    this[focusColor$] = focusColor;
    this[hoverColor$] = hoverColor;
    this[overlayColor$] = overlayColor;
    this[splashRadius$] = splashRadius;
    this[focusNode$] = focusNode;
    this[autofocus$] = autofocus;
    if (!(autofocus != null)) dart.assertFailed(null, I[0], 134, 16, "autofocus != null");
    if (!(activeThumbImage != null || onActiveThumbImageError == null)) dart.assertFailed(null, I[0], 135, 16, "activeThumbImage != null || onActiveThumbImageError == null");
    if (!(inactiveThumbImage != null || onInactiveThumbImageError == null)) dart.assertFailed(null, I[0], 136, 16, "inactiveThumbImage != null || onInactiveThumbImageError == null");
    this[_switchType] = $switch$._SwitchType.adaptive;
    $switch$.Switch.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = $switch$.Switch.prototype;
  dart.addTypeTests($switch$.Switch);
  dart.addTypeCaches($switch$.Switch);
  dart.setMethodSignature($switch$.Switch, () => ({
    __proto__: dart.getMethods($switch$.Switch.__proto__),
    createState: dart.fnType($switch$._SwitchState, [])
  }));
  dart.setLibraryUri($switch$.Switch, I[1]);
  dart.setFieldSignature($switch$.Switch, () => ({
    __proto__: dart.getFields($switch$.Switch.__proto__),
    value: dart.finalFieldType(core.bool),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    activeColor: dart.finalFieldType(dart.nullable(ui.Color)),
    activeTrackColor: dart.finalFieldType(dart.nullable(ui.Color)),
    inactiveThumbColor: dart.finalFieldType(dart.nullable(ui.Color)),
    inactiveTrackColor: dart.finalFieldType(dart.nullable(ui.Color)),
    activeThumbImage: dart.finalFieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    onActiveThumbImageError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
    inactiveThumbImage: dart.finalFieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    onInactiveThumbImageError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
    thumbColor: dart.finalFieldType(dart.nullable(material_state.MaterialStateProperty$(dart.nullable(ui.Color)))),
    trackColor: dart.finalFieldType(dart.nullable(material_state.MaterialStateProperty$(dart.nullable(ui.Color)))),
    materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    [_switchType$]: dart.finalFieldType($switch$._SwitchType),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    mouseCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
    focusColor: dart.finalFieldType(dart.nullable(ui.Color)),
    hoverColor: dart.finalFieldType(dart.nullable(ui.Color)),
    overlayColor: dart.finalFieldType(dart.nullable(material_state.MaterialStateProperty$(dart.nullable(ui.Color)))),
    splashRadius: dart.finalFieldType(dart.nullable(core.double)),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    autofocus: dart.finalFieldType(core.bool)
  }));
  var ___SwitchState__actionMap = dart.privateName($switch$, "_#_SwitchState#_actionMap");
  var ___SwitchState__actionMap_isSet = dart.privateName($switch$, "_#_SwitchState#_actionMap#isSet");
  var _focused = dart.privateName($switch$, "_focused");
  var _hovering = dart.privateName($switch$, "_hovering");
  var _actionMap = dart.privateName($switch$, "_actionMap");
  var _actionHandler = dart.privateName($switch$, "_actionHandler");
  var SemanticsEvent_type = dart.privateName(semantics_event, "SemanticsEvent.type");
  var _handleFocusHighlightChanged = dart.privateName($switch$, "_handleFocusHighlightChanged");
  var _handleHoverChanged = dart.privateName($switch$, "_handleHoverChanged");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _name$0 = dart.privateName(theme_data, "_name");
  var _didFinishDragging = dart.privateName($switch$, "_didFinishDragging");
  var _states = dart.privateName($switch$, "_states");
  var _widgetThumbColor = dart.privateName($switch$, "_widgetThumbColor");
  var _defaultThumbColor = dart.privateName($switch$, "_defaultThumbColor");
  var _widgetTrackColor = dart.privateName($switch$, "_widgetTrackColor");
  var Color_value = dart.privateName(ui, "Color.value");
  var _defaultTrackColor = dart.privateName($switch$, "_defaultTrackColor");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _name$1 = dart.privateName(platform, "_name");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$($switch$.Switch) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$($switch$.Switch)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$($switch$.Switch));
  $switch$._SwitchState = class _SwitchState extends State_TickerProviderStateMixin$36 {
    get [_actionMap]() {
      let t0;
      return dart.test(this[___SwitchState__actionMap_isSet]) ? (t0 = this[___SwitchState__actionMap], t0) : dart.throw(new _internal.LateError.fieldNI("_actionMap"));
    }
    set [_actionMap](t0) {
      if (t0 == null) dart.nullFailed(I[0], 375, 34, "null");
      this[___SwitchState__actionMap_isSet] = true;
      this[___SwitchState__actionMap] = t0;
    }
    initState() {
      super.initState();
      this[_actionMap] = new (T.LinkedMapOfType$ActionOfIntent()).from([dart.wrapType(actions.ActivateIntent), new (T.CallbackActionOfActivateIntent()).new({onInvoke: dart.bind(this, _actionHandler)})]);
    }
    [_actionHandler](intent) {
      if (intent == null) dart.nullFailed(I[0], 385, 38, "intent");
      if (this.widget.onChanged != null) {
        dart.nullCheck(this.widget.onChanged)(!dart.test(this.widget.value));
      }
      let renderObject = dart.nullCheck(this.context.findRenderObject());
      renderObject.sendSemanticsEvent(C[4] || CT.C4);
    }
    [_handleFocusHighlightChanged](focused) {
      if (focused == null) dart.nullFailed(I[0], 394, 42, "focused");
      if (focused != this[_focused]) {
        this.setState(dart.fn(() => {
          this[_focused] = focused;
        }, T.VoidTovoid()));
      }
    }
    [_handleHoverChanged](hovering) {
      if (hovering == null) dart.nullFailed(I[0], 401, 33, "hovering");
      if (hovering != this[_hovering]) {
        this.setState(dart.fn(() => {
          this[_hovering] = hovering;
        }, T.VoidTovoid()));
      }
    }
    getSwitchSize(theme) {
      let t1, t1$;
      if (theme == null) dart.nullFailed(I[0], 407, 32, "theme");
      let effectiveMaterialTapTargetSize = (t1$ = (t1 = this.widget.materialTapTargetSize, t1 == null ? theme.switchTheme.materialTapTargetSize : t1), t1$ == null ? theme.materialTapTargetSize : t1$);
      switch (effectiveMaterialTapTargetSize) {
        case C[6] || CT.C6:
        {
          return C[5] || CT.C5;
        }
        case C[8] || CT.C8:
        {
          return C[7] || CT.C7;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    get enabled() {
      return this.widget.onChanged != null;
    }
    [_didFinishDragging]() {
      this.setState(dart.fn(() => {
      }, T.VoidTovoid()));
    }
    get [_states]() {
      return (() => {
        let t1 = T.LinkedHashSetOfMaterialState().new();
        if (!dart.test(this.enabled)) t1.add(material_state.MaterialState.disabled);
        if (dart.test(this[_hovering])) t1.add(material_state.MaterialState.hovered);
        if (dart.test(this[_focused])) t1.add(material_state.MaterialState.focused);
        if (dart.test(this.widget.value)) t1.add(material_state.MaterialState.selected);
        return t1;
      })();
    }
    get [_widgetThumbColor]() {
      return material_state.MaterialStateProperty.resolveWith(T.ColorN(), dart.fn(states => {
        if (states == null) dart.nullFailed(I[0], 435, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.disabled))) {
          return this.widget.inactiveThumbColor;
        }
        if (dart.test(states.contains(material_state.MaterialState.selected))) {
          return this.widget.activeColor;
        }
        return this.widget.inactiveThumbColor;
      }, T.SetOfMaterialStateToColorN()));
    }
    get [_defaultThumbColor]() {
      let theme = theme$.Theme.of(this.context);
      let isDark = theme.brightness == ui.Brightness.dark;
      return material_state.MaterialStateProperty.resolveWith(ui.Color, dart.fn(states => {
        if (states == null) dart.nullFailed(I[0], 450, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.disabled))) {
          return isDark ? colors.Colors.grey.shade800 : colors.Colors.grey.shade400;
        }
        if (dart.test(states.contains(material_state.MaterialState.selected))) {
          return theme.toggleableActiveColor;
        }
        return isDark ? colors.Colors.grey.shade400 : colors.Colors.grey.shade50;
      }, T.SetOfMaterialStateToColor()));
    }
    get [_widgetTrackColor]() {
      return material_state.MaterialStateProperty.resolveWith(T.ColorN(), dart.fn(states => {
        if (states == null) dart.nullFailed(I[0], 462, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.disabled))) {
          return this.widget.inactiveTrackColor;
        }
        if (dart.test(states.contains(material_state.MaterialState.selected))) {
          return this.widget.activeTrackColor;
        }
        return this.widget.inactiveTrackColor;
      }, T.SetOfMaterialStateToColorN()));
    }
    get [_defaultTrackColor]() {
      let theme = theme$.Theme.of(this.context);
      let isDark = theme.brightness == ui.Brightness.dark;
      let black32 = C[9] || CT.C9;
      return material_state.MaterialStateProperty.resolveWith(ui.Color, dart.fn(states => {
        let t2, t2$;
        if (states == null) dart.nullFailed(I[0], 478, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.disabled))) {
          return isDark ? colors.Colors.white10 : colors.Colors.black12;
        }
        if (dart.test(states.contains(material_state.MaterialState.selected))) {
          let activeState = (t2 = states, (() => {
            t2.add(material_state.MaterialState.selected);
            return t2;
          })());
          let activeColor = (t2$ = this[_widgetThumbColor].resolve(activeState), t2$ == null ? this[_defaultThumbColor].resolve(activeState) : t2$);
          return activeColor.withAlpha(128);
        }
        return isDark ? colors.Colors.white30 : black32;
      }, T.SetOfMaterialStateToColor()));
    }
    buildMaterialSwitch(context) {
      let t2, t2$, t2$0, t2$1, t3, t2$2, t2$3, t2$4, t2$5, t3$, t2$6, t2$7, t2$8, t2$9, t3$0, t2$10, t2$11, t2$12, t2$13, t3$1, t2$14, t2$15, t2$16, t2$17, t2$18, t3$2, t2$19, t2$20, t2$21, t2$22, t2$23, t3$3, t2$24, t2$25, t2$26, t2$27, t3$4, t2$28, t2$29, t2$30, t2$31, t3$5, t2$32, t2$33, t3$6, t2$34, t2$35;
      if (context == null) dart.nullFailed(I[0], 491, 43, "context");
      if (!dart.test(debug.debugCheckHasMaterial(context))) dart.assertFailed(null, I[0], 492, 12, "debugCheckHasMaterial(context)");
      let theme = theme$.Theme.of(context);
      let activeStates = (t2 = this[_states], (() => {
        t2.add(material_state.MaterialState.selected);
        return t2;
      })());
      let inactiveStates = (t2$ = this[_states], (() => {
        t2$.remove(material_state.MaterialState.selected);
        return t2$;
      })());
      let effectiveActiveThumbColor = (t2$3 = (t2$2 = (t2$1 = (t2$0 = this.widget.thumbColor, t2$0 == null ? null : t2$0.resolve(activeStates)), t2$1 == null ? this[_widgetThumbColor].resolve(activeStates) : t2$1), t2$2 == null ? (t3 = theme.switchTheme.thumbColor, t3 == null ? null : t3.resolve(activeStates)) : t2$2), t2$3 == null ? this[_defaultThumbColor].resolve(activeStates) : t2$3);
      let effectiveInactiveThumbColor = (t2$7 = (t2$6 = (t2$5 = (t2$4 = this.widget.thumbColor, t2$4 == null ? null : t2$4.resolve(inactiveStates)), t2$5 == null ? this[_widgetThumbColor].resolve(inactiveStates) : t2$5), t2$6 == null ? (t3$ = theme.switchTheme.thumbColor, t3$ == null ? null : t3$.resolve(inactiveStates)) : t2$6), t2$7 == null ? this[_defaultThumbColor].resolve(inactiveStates) : t2$7);
      let effectiveActiveTrackColor = (t2$11 = (t2$10 = (t2$9 = (t2$8 = this.widget.trackColor, t2$8 == null ? null : t2$8.resolve(activeStates)), t2$9 == null ? this[_widgetTrackColor].resolve(activeStates) : t2$9), t2$10 == null ? (t3$0 = theme.switchTheme.trackColor, t3$0 == null ? null : t3$0.resolve(activeStates)) : t2$10), t2$11 == null ? this[_defaultTrackColor].resolve(activeStates) : t2$11);
      let effectiveInactiveTrackColor = (t2$15 = (t2$14 = (t2$13 = (t2$12 = this.widget.trackColor, t2$12 == null ? null : t2$12.resolve(inactiveStates)), t2$13 == null ? this[_widgetTrackColor].resolve(inactiveStates) : t2$13), t2$14 == null ? (t3$1 = theme.switchTheme.trackColor, t3$1 == null ? null : t3$1.resolve(inactiveStates)) : t2$14), t2$15 == null ? this[_defaultTrackColor].resolve(inactiveStates) : t2$15);
      let focusedStates = (t2$16 = this[_states], (() => {
        t2$16.add(material_state.MaterialState.focused);
        return t2$16;
      })());
      let effectiveFocusOverlayColor = (t2$20 = (t2$19 = (t2$18 = (t2$17 = this.widget.overlayColor, t2$17 == null ? null : t2$17.resolve(focusedStates)), t2$18 == null ? this.widget.focusColor : t2$18), t2$19 == null ? (t3$2 = theme.switchTheme.overlayColor, t3$2 == null ? null : t3$2.resolve(focusedStates)) : t2$19), t2$20 == null ? theme.focusColor : t2$20);
      let hoveredStates = (t2$21 = this[_states], (() => {
        t2$21.add(material_state.MaterialState.hovered);
        return t2$21;
      })());
      let effectiveHoverOverlayColor = (t2$25 = (t2$24 = (t2$23 = (t2$22 = this.widget.overlayColor, t2$22 == null ? null : t2$22.resolve(hoveredStates)), t2$23 == null ? this.widget.hoverColor : t2$23), t2$24 == null ? (t3$3 = theme.switchTheme.overlayColor, t3$3 == null ? null : t3$3.resolve(hoveredStates)) : t2$24), t2$25 == null ? theme.hoverColor : t2$25);
      let activePressedStates = (t2$26 = activeStates, (() => {
        t2$26.add(material_state.MaterialState.pressed);
        return t2$26;
      })());
      let effectiveActivePressedOverlayColor = (t2$29 = (t2$28 = (t2$27 = this.widget.overlayColor, t2$27 == null ? null : t2$27.resolve(activePressedStates)), t2$28 == null ? (t3$4 = theme.switchTheme.overlayColor, t3$4 == null ? null : t3$4.resolve(activePressedStates)) : t2$28), t2$29 == null ? effectiveActiveThumbColor.withAlpha(31) : t2$29);
      let inactivePressedStates = (t2$30 = inactiveStates, (() => {
        t2$30.add(material_state.MaterialState.pressed);
        return t2$30;
      })());
      let effectiveInactivePressedOverlayColor = (t2$33 = (t2$32 = (t2$31 = this.widget.overlayColor, t2$31 == null ? null : t2$31.resolve(inactivePressedStates)), t2$32 == null ? (t3$5 = theme.switchTheme.overlayColor, t3$5 == null ? null : t3$5.resolve(inactivePressedStates)) : t2$32), t2$33 == null ? effectiveActiveThumbColor.withAlpha(31) : t2$33);
      let effectiveMouseCursor = (t2$35 = (t2$34 = material_state.MaterialStateProperty.resolveAs(T.MouseCursorN(), this.widget.mouseCursor, this[_states]), t2$34 == null ? (t3$6 = theme.switchTheme.mouseCursor, t3$6 == null ? null : t3$6.resolve(this[_states])) : t2$34), t2$35 == null ? material_state.MaterialStateProperty.resolveAs(mouse_cursor.MouseCursor, material_state.MaterialStateMouseCursor.clickable, this[_states]) : t2$35);
      return new actions.FocusableActionDetector.new({actions: this[_actionMap], focusNode: this.widget.focusNode, autofocus: this.widget.autofocus, enabled: this.enabled, onShowFocusHighlight: dart.bind(this, _handleFocusHighlightChanged), onShowHoverHighlight: dart.bind(this, _handleHoverChanged), mouseCursor: effectiveMouseCursor, child: new basic.Builder.new({builder: dart.fn(context => {
            let t2, t2$;
            if (context == null) dart.nullFailed(I[0], 552, 32, "context");
            return new $switch$._SwitchRenderObjectWidget.new({dragStartBehavior: this.widget.dragStartBehavior, value: this.widget.value, activeColor: effectiveActiveThumbColor, inactiveColor: effectiveInactiveThumbColor, surfaceColor: theme.colorScheme.surface, focusColor: effectiveFocusOverlayColor, hoverColor: effectiveHoverOverlayColor, reactionColor: effectiveActivePressedOverlayColor, inactiveReactionColor: effectiveInactivePressedOverlayColor, splashRadius: (t2$ = (t2 = this.widget.splashRadius, t2 == null ? theme.switchTheme.splashRadius : t2), t2$ == null ? 20 : t2$), activeThumbImage: this.widget.activeThumbImage, onActiveThumbImageError: this.widget.onActiveThumbImageError, inactiveThumbImage: this.widget.inactiveThumbImage, onInactiveThumbImageError: this.widget.onInactiveThumbImageError, activeTrackColor: effectiveActiveTrackColor, inactiveTrackColor: effectiveInactiveTrackColor, configuration: image.createLocalImageConfiguration(context), onChanged: this.widget.onChanged, additionalConstraints: new box.BoxConstraints.tight(this.getSwitchSize(theme)), hasFocus: this[_focused], hovering: this[_hovering], state: this, $creationLocationd_0dea112b090073317d4: C[10] || CT.C10});
          }, T.BuildContextTo_SwitchRenderObjectWidget()), $creationLocationd_0dea112b090073317d4: C[34] || CT.C34}), $creationLocationd_0dea112b090073317d4: C[37] || CT.C37});
    }
    buildCupertinoSwitch(context) {
      if (context == null) dart.nullFailed(I[0], 582, 44, "context");
      let size = this.getSwitchSize(theme$.Theme.of(context));
      return new focus_scope.Focus.new({focusNode: this.widget.focusNode, autofocus: this.widget.autofocus, child: new container.Container.new({width: size.width, height: size.height, alignment: alignment.Alignment.center, child: new $switch.CupertinoSwitch.new({dragStartBehavior: this.widget.dragStartBehavior, value: this.widget.value, onChanged: this.widget.onChanged, activeColor: this.widget.activeColor, trackColor: this.widget.inactiveTrackColor, $creationLocationd_0dea112b090073317d4: C[47] || CT.C47}), $creationLocationd_0dea112b090073317d4: C[54] || CT.C54}), $creationLocationd_0dea112b090073317d4: C[60] || CT.C60});
    }
    build(context) {
      if (context == null) dart.nullFailed(I[0], 603, 29, "context");
      switch (this.widget[_switchType$]) {
        case C[0] || CT.C0:
        {
          return this.buildMaterialSwitch(context);
        }
        case C[1] || CT.C1:
        {
          {
            let theme = theme$.Theme.of(context);
            if (!(theme.platform != null)) dart.assertFailed(null, I[0], 610, 16, "theme.platform != null");
            switch (theme.platform) {
              case C[65] || CT.C65:
              case C[66] || CT.C66:
              case C[67] || CT.C67:
              case C[68] || CT.C68:
              {
                return this.buildMaterialSwitch(context);
              }
              case C[69] || CT.C69:
              case C[70] || CT.C70:
              {
                return this.buildCupertinoSwitch(context);
              }
              default:
              {
                dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
              }
            }
          }
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
  };
  ($switch$._SwitchState.new = function() {
    this[___SwitchState__actionMap] = null;
    this[___SwitchState__actionMap_isSet] = false;
    this[_focused] = false;
    this[_hovering] = false;
    $switch$._SwitchState.__proto__.new.call(this);
    ;
  }).prototype = $switch$._SwitchState.prototype;
  dart.addTypeTests($switch$._SwitchState);
  dart.addTypeCaches($switch$._SwitchState);
  dart.setMethodSignature($switch$._SwitchState, () => ({
    __proto__: dart.getMethods($switch$._SwitchState.__proto__),
    [_actionHandler]: dart.fnType(dart.void, [actions.ActivateIntent]),
    [_handleFocusHighlightChanged]: dart.fnType(dart.void, [core.bool]),
    [_handleHoverChanged]: dart.fnType(dart.void, [core.bool]),
    getSwitchSize: dart.fnType(ui.Size, [theme_data.ThemeData]),
    [_didFinishDragging]: dart.fnType(dart.void, []),
    buildMaterialSwitch: dart.fnType(framework.Widget, [framework.BuildContext]),
    buildCupertinoSwitch: dart.fnType(framework.Widget, [framework.BuildContext]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature($switch$._SwitchState, () => ({
    __proto__: dart.getGetters($switch$._SwitchState.__proto__),
    [_actionMap]: core.Map$(core.Type, actions.Action$(actions.Intent)),
    enabled: core.bool,
    [_states]: core.Set$(material_state.MaterialState),
    [_widgetThumbColor]: material_state.MaterialStateProperty$(dart.nullable(ui.Color)),
    [_defaultThumbColor]: material_state.MaterialStateProperty$(ui.Color),
    [_widgetTrackColor]: material_state.MaterialStateProperty$(dart.nullable(ui.Color)),
    [_defaultTrackColor]: material_state.MaterialStateProperty$(ui.Color)
  }));
  dart.setSetterSignature($switch$._SwitchState, () => ({
    __proto__: dart.getSetters($switch$._SwitchState.__proto__),
    [_actionMap]: core.Map$(core.Type, actions.Action$(actions.Intent))
  }));
  dart.setLibraryUri($switch$._SwitchState, I[1]);
  dart.setFieldSignature($switch$._SwitchState, () => ({
    __proto__: dart.getFields($switch$._SwitchState.__proto__),
    [___SwitchState__actionMap]: dart.fieldType(dart.nullable(core.Map$(core.Type, actions.Action$(actions.Intent)))),
    [___SwitchState__actionMap_isSet]: dart.fieldType(core.bool),
    [_focused]: dart.fieldType(core.bool),
    [_hovering]: dart.fieldType(core.bool)
  }));
  var value$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.value");
  var activeColor$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.activeColor");
  var inactiveColor$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.inactiveColor");
  var hoverColor$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.hoverColor");
  var focusColor$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.focusColor");
  var reactionColor$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.reactionColor");
  var inactiveReactionColor$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.inactiveReactionColor");
  var splashRadius$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.splashRadius");
  var activeThumbImage$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.activeThumbImage");
  var onActiveThumbImageError$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.onActiveThumbImageError");
  var inactiveThumbImage$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.inactiveThumbImage");
  var onInactiveThumbImageError$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.onInactiveThumbImageError");
  var activeTrackColor$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.activeTrackColor");
  var inactiveTrackColor$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.inactiveTrackColor");
  var configuration$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.configuration");
  var onChanged$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.onChanged");
  var additionalConstraints$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.additionalConstraints");
  var dragStartBehavior$0 = dart.privateName($switch$, "_SwitchRenderObjectWidget.dragStartBehavior");
  var hasFocus$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.hasFocus");
  var hovering$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.hovering");
  var state$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.state");
  var surfaceColor$ = dart.privateName($switch$, "_SwitchRenderObjectWidget.surfaceColor");
  var _handleValueChanged = dart.privateName($switch$, "_handleValueChanged");
  $switch$._SwitchRenderObjectWidget = class _SwitchRenderObjectWidget extends framework.LeafRenderObjectWidget {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get activeColor() {
      return this[activeColor$0];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get inactiveColor() {
      return this[inactiveColor$];
    }
    set inactiveColor(value) {
      super.inactiveColor = value;
    }
    get hoverColor() {
      return this[hoverColor$0];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get focusColor() {
      return this[focusColor$0];
    }
    set focusColor(value) {
      super.focusColor = value;
    }
    get reactionColor() {
      return this[reactionColor$];
    }
    set reactionColor(value) {
      super.reactionColor = value;
    }
    get inactiveReactionColor() {
      return this[inactiveReactionColor$];
    }
    set inactiveReactionColor(value) {
      super.inactiveReactionColor = value;
    }
    get splashRadius() {
      return this[splashRadius$0];
    }
    set splashRadius(value) {
      super.splashRadius = value;
    }
    get activeThumbImage() {
      return this[activeThumbImage$0];
    }
    set activeThumbImage(value) {
      super.activeThumbImage = value;
    }
    get onActiveThumbImageError() {
      return this[onActiveThumbImageError$0];
    }
    set onActiveThumbImageError(value) {
      super.onActiveThumbImageError = value;
    }
    get inactiveThumbImage() {
      return this[inactiveThumbImage$0];
    }
    set inactiveThumbImage(value) {
      super.inactiveThumbImage = value;
    }
    get onInactiveThumbImageError() {
      return this[onInactiveThumbImageError$0];
    }
    set onInactiveThumbImageError(value) {
      super.onInactiveThumbImageError = value;
    }
    get activeTrackColor() {
      return this[activeTrackColor$0];
    }
    set activeTrackColor(value) {
      super.activeTrackColor = value;
    }
    get inactiveTrackColor() {
      return this[inactiveTrackColor$0];
    }
    set inactiveTrackColor(value) {
      super.inactiveTrackColor = value;
    }
    get configuration() {
      return this[configuration$];
    }
    set configuration(value) {
      super.configuration = value;
    }
    get onChanged() {
      return this[onChanged$0];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get additionalConstraints() {
      return this[additionalConstraints$];
    }
    set additionalConstraints(value) {
      super.additionalConstraints = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$0];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get hasFocus() {
      return this[hasFocus$];
    }
    set hasFocus(value) {
      super.hasFocus = value;
    }
    get hovering() {
      return this[hovering$];
    }
    set hovering(value) {
      super.hovering = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
    get surfaceColor() {
      return this[surfaceColor$];
    }
    set surfaceColor(value) {
      super.surfaceColor = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 677, 49, "context");
      return new $switch$._RenderSwitch.new({dragStartBehavior: this.dragStartBehavior, value: this.value, activeColor: this.activeColor, inactiveColor: this.inactiveColor, hoverColor: this.hoverColor, focusColor: this.focusColor, reactionColor: this.reactionColor, inactiveReactionColor: this.inactiveReactionColor, splashRadius: this.splashRadius, activeThumbImage: this.activeThumbImage, onActiveThumbImageError: this.onActiveThumbImageError, inactiveThumbImage: this.inactiveThumbImage, onInactiveThumbImageError: this.onInactiveThumbImageError, activeTrackColor: this.activeTrackColor, inactiveTrackColor: this.inactiveTrackColor, configuration: this.configuration, onChanged: this.onChanged != null ? dart.bind(this, _handleValueChanged) : null, textDirection: basic.Directionality.of(context), additionalConstraints: this.additionalConstraints, hasFocus: this.hasFocus, hovering: this.hovering, state: this.state, surfaceColor: this.surfaceColor});
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 706, 40, "context");
      $switch$._RenderSwitch.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 706, 63, "renderObject");
      t2 = renderObject;
      (() => {
        t2.value = this.value;
        t2.activeColor = this.activeColor;
        t2.inactiveColor = this.inactiveColor;
        t2.hoverColor = this.hoverColor;
        t2.focusColor = this.focusColor;
        t2.reactionColor = this.reactionColor;
        t2.inactiveReactionColor = this.inactiveReactionColor;
        t2.splashRadius = this.splashRadius;
        t2.activeThumbImage = this.activeThumbImage;
        t2.onActiveThumbImageError = this.onActiveThumbImageError;
        t2.inactiveThumbImage = this.inactiveThumbImage;
        t2.onInactiveThumbImageError = this.onInactiveThumbImageError;
        t2.activeTrackColor = this.activeTrackColor;
        t2.inactiveTrackColor = this.inactiveTrackColor;
        t2.configuration = this.configuration;
        t2.onChanged = this.onChanged != null ? dart.bind(this, _handleValueChanged) : null;
        t2.textDirection = basic.Directionality.of(context);
        t2.additionalConstraints = this.additionalConstraints;
        t2.dragStartBehavior = this.dragStartBehavior;
        t2.hasFocus = this.hasFocus;
        t2.hovering = this.hovering;
        t2.vsync = this.state;
        t2.surfaceColor = this.surfaceColor;
        return t2;
      })();
    }
    [_handleValueChanged](value) {
      if (!(value != null)) dart.assertFailed(null, I[0], 738, 12, "value != null");
      if (this.onChanged != null) {
        dart.nullCheck(this.onChanged)(dart.nullCheck(value));
      }
    }
  };
  ($switch$._SwitchRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[0], 629, 19, "value");
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    if (activeColor == null) dart.nullFailed(I[0], 630, 19, "activeColor");
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    if (inactiveColor == null) dart.nullFailed(I[0], 631, 19, "inactiveColor");
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    if (hoverColor == null) dart.nullFailed(I[0], 632, 19, "hoverColor");
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    if (focusColor == null) dart.nullFailed(I[0], 633, 19, "focusColor");
    let reactionColor = opts && 'reactionColor' in opts ? opts.reactionColor : null;
    if (reactionColor == null) dart.nullFailed(I[0], 634, 19, "reactionColor");
    let inactiveReactionColor = opts && 'inactiveReactionColor' in opts ? opts.inactiveReactionColor : null;
    if (inactiveReactionColor == null) dart.nullFailed(I[0], 635, 19, "inactiveReactionColor");
    let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
    if (splashRadius == null) dart.nullFailed(I[0], 636, 19, "splashRadius");
    let activeThumbImage = opts && 'activeThumbImage' in opts ? opts.activeThumbImage : null;
    let onActiveThumbImageError = opts && 'onActiveThumbImageError' in opts ? opts.onActiveThumbImageError : null;
    let inactiveThumbImage = opts && 'inactiveThumbImage' in opts ? opts.inactiveThumbImage : null;
    let onInactiveThumbImageError = opts && 'onInactiveThumbImageError' in opts ? opts.onInactiveThumbImageError : null;
    let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
    if (activeTrackColor == null) dart.nullFailed(I[0], 641, 19, "activeTrackColor");
    let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
    if (inactiveTrackColor == null) dart.nullFailed(I[0], 642, 19, "inactiveTrackColor");
    let configuration = opts && 'configuration' in opts ? opts.configuration : null;
    if (configuration == null) dart.nullFailed(I[0], 643, 19, "configuration");
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let additionalConstraints = opts && 'additionalConstraints' in opts ? opts.additionalConstraints : null;
    if (additionalConstraints == null) dart.nullFailed(I[0], 645, 19, "additionalConstraints");
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : null;
    if (dragStartBehavior == null) dart.nullFailed(I[0], 646, 19, "dragStartBehavior");
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
    if (hasFocus == null) dart.nullFailed(I[0], 647, 19, "hasFocus");
    let hovering = opts && 'hovering' in opts ? opts.hovering : null;
    if (hovering == null) dart.nullFailed(I[0], 648, 19, "hovering");
    let state = opts && 'state' in opts ? opts.state : null;
    if (state == null) dart.nullFailed(I[0], 649, 19, "state");
    let surfaceColor = opts && 'surfaceColor' in opts ? opts.surfaceColor : null;
    if (surfaceColor == null) dart.nullFailed(I[0], 650, 19, "surfaceColor");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[value$0] = value;
    this[activeColor$0] = activeColor;
    this[inactiveColor$] = inactiveColor;
    this[hoverColor$0] = hoverColor;
    this[focusColor$0] = focusColor;
    this[reactionColor$] = reactionColor;
    this[inactiveReactionColor$] = inactiveReactionColor;
    this[splashRadius$0] = splashRadius;
    this[activeThumbImage$0] = activeThumbImage;
    this[onActiveThumbImageError$0] = onActiveThumbImageError;
    this[inactiveThumbImage$0] = inactiveThumbImage;
    this[onInactiveThumbImageError$0] = onInactiveThumbImageError;
    this[activeTrackColor$0] = activeTrackColor;
    this[inactiveTrackColor$0] = inactiveTrackColor;
    this[configuration$] = configuration;
    this[onChanged$0] = onChanged;
    this[additionalConstraints$] = additionalConstraints;
    this[dragStartBehavior$0] = dragStartBehavior;
    this[hasFocus$] = hasFocus;
    this[hovering$] = hovering;
    this[state$] = state;
    this[surfaceColor$] = surfaceColor;
    $switch$._SwitchRenderObjectWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = $switch$._SwitchRenderObjectWidget.prototype;
  dart.addTypeTests($switch$._SwitchRenderObjectWidget);
  dart.addTypeCaches($switch$._SwitchRenderObjectWidget);
  dart.setMethodSignature($switch$._SwitchRenderObjectWidget, () => ({
    __proto__: dart.getMethods($switch$._SwitchRenderObjectWidget.__proto__),
    createRenderObject: dart.fnType($switch$._RenderSwitch, [framework.BuildContext]),
    [_handleValueChanged]: dart.fnType(dart.void, [dart.nullable(core.bool)])
  }));
  dart.setLibraryUri($switch$._SwitchRenderObjectWidget, I[1]);
  dart.setFieldSignature($switch$._SwitchRenderObjectWidget, () => ({
    __proto__: dart.getFields($switch$._SwitchRenderObjectWidget.__proto__),
    value: dart.finalFieldType(core.bool),
    activeColor: dart.finalFieldType(ui.Color),
    inactiveColor: dart.finalFieldType(ui.Color),
    hoverColor: dart.finalFieldType(ui.Color),
    focusColor: dart.finalFieldType(ui.Color),
    reactionColor: dart.finalFieldType(ui.Color),
    inactiveReactionColor: dart.finalFieldType(ui.Color),
    splashRadius: dart.finalFieldType(core.double),
    activeThumbImage: dart.finalFieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    onActiveThumbImageError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
    inactiveThumbImage: dart.finalFieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    onInactiveThumbImageError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
    activeTrackColor: dart.finalFieldType(ui.Color),
    inactiveTrackColor: dart.finalFieldType(ui.Color),
    configuration: dart.finalFieldType(image_provider.ImageConfiguration),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    additionalConstraints: dart.finalFieldType(box.BoxConstraints),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    hasFocus: dart.finalFieldType(core.bool),
    hovering: dart.finalFieldType(core.bool),
    state: dart.finalFieldType($switch$._SwitchState),
    surfaceColor: dart.finalFieldType(ui.Color)
  }));
  var ___RenderSwitch__drag = dart.privateName($switch$, "_#_RenderSwitch#_drag");
  var ___RenderSwitch__drag_isSet = dart.privateName($switch$, "_#_RenderSwitch#_drag#isSet");
  var _needsPositionAnimation = dart.privateName($switch$, "_needsPositionAnimation");
  var _cachedThumbColor = dart.privateName($switch$, "_cachedThumbColor");
  var _cachedThumbImage = dart.privateName($switch$, "_cachedThumbImage");
  var _cachedThumbErrorListener = dart.privateName($switch$, "_cachedThumbErrorListener");
  var _cachedThumbPainter = dart.privateName($switch$, "_cachedThumbPainter");
  var _isPainting = dart.privateName($switch$, "_isPainting");
  var _activeThumbImage = dart.privateName($switch$, "_activeThumbImage");
  var _onActiveThumbImageError = dart.privateName($switch$, "_onActiveThumbImageError");
  var _inactiveThumbImage = dart.privateName($switch$, "_inactiveThumbImage");
  var _onInactiveThumbImageError = dart.privateName($switch$, "_onInactiveThumbImageError");
  var _activeTrackColor = dart.privateName($switch$, "_activeTrackColor");
  var _inactiveTrackColor = dart.privateName($switch$, "_inactiveTrackColor");
  var _configuration = dart.privateName($switch$, "_configuration");
  var _textDirection = dart.privateName($switch$, "_textDirection");
  var _surfaceColor = dart.privateName($switch$, "_surfaceColor");
  var _drag = dart.privateName($switch$, "_drag");
  var _handleDragStart = dart.privateName($switch$, "_handleDragStart");
  var _handleDragUpdate = dart.privateName($switch$, "_handleDragUpdate");
  var _handleDragEnd = dart.privateName($switch$, "_handleDragEnd");
  var _trackInnerLength = dart.privateName($switch$, "_trackInnerLength");
  var _name$2 = dart.privateName(ui, "_name");
  var _createDefaultThumbDecoration = dart.privateName($switch$, "_createDefaultThumbDecoration");
  var _handleDecorationChanged = dart.privateName($switch$, "_handleDecorationChanged");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  $switch$._RenderSwitch = class _RenderSwitch extends toggleable.RenderToggleable {
    get activeThumbImage() {
      return this[_activeThumbImage];
    }
    set activeThumbImage(value) {
      if (dart.equals(value, this[_activeThumbImage])) return;
      this[_activeThumbImage] = value;
      this.markNeedsPaint();
    }
    get onActiveThumbImageError() {
      return this[_onActiveThumbImageError];
    }
    set onActiveThumbImageError(value) {
      if (dart.equals(value, this[_onActiveThumbImageError])) {
        return;
      }
      this[_onActiveThumbImageError] = value;
      this.markNeedsPaint();
    }
    get inactiveThumbImage() {
      return this[_inactiveThumbImage];
    }
    set inactiveThumbImage(value) {
      if (dart.equals(value, this[_inactiveThumbImage])) return;
      this[_inactiveThumbImage] = value;
      this.markNeedsPaint();
    }
    get onInactiveThumbImageError() {
      return this[_onInactiveThumbImageError];
    }
    set onInactiveThumbImageError(value) {
      if (dart.equals(value, this[_onInactiveThumbImageError])) {
        return;
      }
      this[_onInactiveThumbImageError] = value;
      this.markNeedsPaint();
    }
    get activeTrackColor() {
      return this[_activeTrackColor];
    }
    set activeTrackColor(value) {
      if (value == null) dart.nullFailed(I[0], 843, 30, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 844, 12, "value != null");
      if (dart.equals(value, this[_activeTrackColor])) return;
      this[_activeTrackColor] = value;
      this.markNeedsPaint();
    }
    get inactiveTrackColor() {
      return this[_inactiveTrackColor];
    }
    set inactiveTrackColor(value) {
      if (value == null) dart.nullFailed(I[0], 853, 32, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 854, 12, "value != null");
      if (dart.equals(value, this[_inactiveTrackColor])) return;
      this[_inactiveTrackColor] = value;
      this.markNeedsPaint();
    }
    get configuration() {
      return this[_configuration];
    }
    set configuration(value) {
      if (value == null) dart.nullFailed(I[0], 863, 40, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 864, 12, "value != null");
      if (dart.equals(value, this[_configuration])) return;
      this[_configuration] = value;
      this.markNeedsPaint();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (value == null) dart.nullFailed(I[0], 873, 35, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 874, 12, "value != null");
      if (this[_textDirection] == value) return;
      this[_textDirection] = value;
      this.markNeedsPaint();
    }
    get dragStartBehavior() {
      return this[_drag].dragStartBehavior;
    }
    set dragStartBehavior(value) {
      if (value == null) dart.nullFailed(I[0], 882, 43, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 883, 12, "value != null");
      if (this[_drag].dragStartBehavior == value) return;
      this[_drag].dragStartBehavior = value;
    }
    get surfaceColor() {
      return this[_surfaceColor];
    }
    set surfaceColor(value) {
      if (value == null) dart.nullFailed(I[0], 891, 26, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 892, 12, "value != null");
      if (dart.equals(value, this[_surfaceColor])) return;
      this[_surfaceColor] = value;
      this.markNeedsPaint();
    }
    set value(newValue) {
      if (!(this.value != null)) dart.assertFailed(null, I[0], 903, 12, "value != null");
      super.value = newValue;
      if (dart.test(this[_needsPositionAnimation])) {
        this[_needsPositionAnimation] = false;
        this.position.reverseCurve = null;
        if (dart.nullCheck(newValue))
          this.positionController.forward();
        else
          this.positionController.reverse();
      }
    }
    get value() {
      return super.value;
    }
    detach() {
      let t2;
      t2 = this[_cachedThumbPainter];
      t2 == null ? null : t2.dispose();
      this[_cachedThumbPainter] = null;
      super.detach();
    }
    get [_trackInnerLength]() {
      return dart.notNull(this.size.width) - 40;
    }
    get [_drag]() {
      let t2;
      return dart.test(this[___RenderSwitch__drag_isSet]) ? (t2 = this[___RenderSwitch__drag], t2) : dart.throw(new _internal.LateError.fieldNI("_drag"));
    }
    set [_drag](t2) {
      if (t2 == null) dart.nullFailed(I[0], 925, 40, "null");
      this[___RenderSwitch__drag_isSet] = true;
      this[___RenderSwitch__drag] = t2;
    }
    [_handleDragStart](details) {
      if (details == null) dart.nullFailed(I[0], 929, 42, "details");
      if (dart.test(this.isInteractive)) this.reactionController.forward();
    }
    [_handleDragUpdate](details) {
      let t3, t3$;
      if (details == null) dart.nullFailed(I[0], 934, 44, "details");
      if (dart.test(this.isInteractive)) {
        this.position.reverseCurve = null;
        let delta = dart.nullCheck(details.primaryDelta) / dart.notNull(this[_trackInnerLength]);
        switch (this.textDirection) {
          case C[71] || CT.C71:
          {
            t3 = this.positionController;
            t3.value = dart.notNull(t3.value) - delta;
            break;
          }
          case C[72] || CT.C72:
          {
            t3$ = this.positionController;
            t3$.value = dart.notNull(t3$.value) + delta;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
    [_handleDragEnd](details) {
      if (details == null) dart.nullFailed(I[0], 949, 38, "details");
      this[_needsPositionAnimation] = true;
      if (dart.notNull(this.position.value) >= 0.5 !== this.value) dart.nullCheck(this.onChanged)(!dart.nullCheck(this.value));
      this.reactionController.reverse();
      this.state[_didFinishDragging]();
    }
    handleEvent(event, entry) {
      if (event == null) dart.nullFailed(I[0], 959, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[0], 959, 56, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, I[0], 960, 12, "debugHandleEvent(event, entry)");
      if (events.PointerDownEvent.is(event) && this.onChanged != null) this[_drag].addPointer(event);
      super.handleEvent(event, entry);
    }
    [_createDefaultThumbDecoration](color, image, errorListener) {
      if (color == null) dart.nullFailed(I[0], 971, 53, "color");
      return new box_decoration.BoxDecoration.new({color: color, image: image == null ? null : new decoration_image.DecorationImage.new({image: image, onError: errorListener}), shape: box_border.BoxShape.circle, boxShadow: shadows.kElevationToShadow[$_get](1)});
    }
    [_handleDecorationChanged]() {
      if (!dart.test(this[_isPainting])) this.markNeedsPaint();
    }
    describeSemanticsConfiguration(config) {
      if (config == null) dart.nullFailed(I[0], 992, 62, "config");
      super.describeSemanticsConfiguration(config);
      config.isToggled = this.value === true;
    }
    paint(context, offset) {
      let t3;
      if (context == null) dart.nullFailed(I[0], 998, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 998, 46, "offset");
      let canvas = context.canvas;
      let isEnabled = this.onChanged != null;
      let currentValue = this.position.value;
      let visualPosition = null;
      switch (this.textDirection) {
        case C[71] || CT.C71:
        {
          visualPosition = 1.0 - dart.notNull(currentValue);
          break;
        }
        case C[72] || CT.C72:
        {
          visualPosition = currentValue;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let trackColor = dart.nullCheck(ui.Color.lerp(this.inactiveTrackColor, this.activeTrackColor, currentValue));
      let lerpedThumbColor = dart.nullCheck(ui.Color.lerp(this.inactiveColor, this.activeColor, currentValue));
      let thumbColor = ui.Color.alphaBlend(lerpedThumbColor, this.surfaceColor);
      let thumbImage = isEnabled ? dart.notNull(currentValue) < 0.5 ? this.inactiveThumbImage : this.activeThumbImage : this.inactiveThumbImage;
      let thumbErrorListener = isEnabled ? dart.notNull(currentValue) < 0.5 ? this.onInactiveThumbImageError : this.onActiveThumbImageError : this.onInactiveThumbImageError;
      let paint = (t3 = ui.Paint.new(), (() => {
        t3.color = trackColor;
        return t3;
      })());
      let trackRect = new ui.Rect.fromLTWH(dart.notNull(offset.dx) + 13, dart.notNull(offset.dy) + (dart.notNull(this.size.height) - 14) / 2.0, dart.notNull(this.size.width) - 2.0 * 13, 14);
      let trackRRect = new ui.RRect.fromRectAndRadius(trackRect, C[73] || CT.C73);
      canvas.drawRRect(trackRRect, paint);
      let thumbPosition = new ui.Offset.new(20 + dart.notNull(visualPosition) * dart.notNull(this[_trackInnerLength]), dart.notNull(this.size.height) / 2.0);
      this.paintRadialReaction(canvas, offset, thumbPosition);
      try {
        this[_isPainting] = true;
        if (this[_cachedThumbPainter] == null || !dart.equals(thumbColor, this[_cachedThumbColor]) || !dart.equals(thumbImage, this[_cachedThumbImage]) || !dart.equals(thumbErrorListener, this[_cachedThumbErrorListener])) {
          this[_cachedThumbColor] = thumbColor;
          this[_cachedThumbImage] = thumbImage;
          this[_cachedThumbErrorListener] = thumbErrorListener;
          this[_cachedThumbPainter] = this[_createDefaultThumbDecoration](thumbColor, thumbImage, thumbErrorListener).createBoxPainter(dart.bind(this, _handleDecorationChanged));
        }
        let thumbPainter = dart.nullCheck(this[_cachedThumbPainter]);
        let inset = 1.0 - (dart.notNull(currentValue) - 0.5)[$abs]() * 2.0;
        let radius = 10 - inset;
        thumbPainter.paint(canvas, thumbPosition['+'](offset)['-'](new ui.Offset.new(radius, radius)), this.configuration.copyWith({size: new ui.Size.fromRadius(radius)}));
      } finally {
        this[_isPainting] = false;
      }
    }
  };
  ($switch$._RenderSwitch.new = function(opts) {
    let t2;
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[0], 747, 19, "value");
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    if (activeColor == null) dart.nullFailed(I[0], 748, 20, "activeColor");
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    if (inactiveColor == null) dart.nullFailed(I[0], 749, 20, "inactiveColor");
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    if (hoverColor == null) dart.nullFailed(I[0], 750, 20, "hoverColor");
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    if (focusColor == null) dart.nullFailed(I[0], 751, 20, "focusColor");
    let reactionColor = opts && 'reactionColor' in opts ? opts.reactionColor : null;
    if (reactionColor == null) dart.nullFailed(I[0], 752, 20, "reactionColor");
    let inactiveReactionColor = opts && 'inactiveReactionColor' in opts ? opts.inactiveReactionColor : null;
    if (inactiveReactionColor == null) dart.nullFailed(I[0], 753, 20, "inactiveReactionColor");
    let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
    if (splashRadius == null) dart.nullFailed(I[0], 754, 21, "splashRadius");
    let activeThumbImage = opts && 'activeThumbImage' in opts ? opts.activeThumbImage : null;
    let onActiveThumbImageError = opts && 'onActiveThumbImageError' in opts ? opts.onActiveThumbImageError : null;
    let inactiveThumbImage = opts && 'inactiveThumbImage' in opts ? opts.inactiveThumbImage : null;
    let onInactiveThumbImageError = opts && 'onInactiveThumbImageError' in opts ? opts.onInactiveThumbImageError : null;
    let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
    if (activeTrackColor == null) dart.nullFailed(I[0], 759, 20, "activeTrackColor");
    let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
    if (inactiveTrackColor == null) dart.nullFailed(I[0], 760, 20, "inactiveTrackColor");
    let configuration = opts && 'configuration' in opts ? opts.configuration : null;
    if (configuration == null) dart.nullFailed(I[0], 761, 33, "configuration");
    let additionalConstraints = opts && 'additionalConstraints' in opts ? opts.additionalConstraints : null;
    if (additionalConstraints == null) dart.nullFailed(I[0], 762, 29, "additionalConstraints");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (textDirection == null) dart.nullFailed(I[0], 763, 28, "textDirection");
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : null;
    if (dragStartBehavior == null) dart.nullFailed(I[0], 765, 32, "dragStartBehavior");
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
    if (hasFocus == null) dart.nullFailed(I[0], 766, 19, "hasFocus");
    let hovering = opts && 'hovering' in opts ? opts.hovering : null;
    if (hovering == null) dart.nullFailed(I[0], 767, 19, "hovering");
    let state = opts && 'state' in opts ? opts.state : null;
    if (state == null) dart.nullFailed(I[0], 768, 19, "state");
    let surfaceColor = opts && 'surfaceColor' in opts ? opts.surfaceColor : null;
    if (surfaceColor == null) dart.nullFailed(I[0], 769, 20, "surfaceColor");
    this[___RenderSwitch__drag] = null;
    this[___RenderSwitch__drag_isSet] = false;
    this[_needsPositionAnimation] = false;
    this[_cachedThumbColor] = null;
    this[_cachedThumbImage] = null;
    this[_cachedThumbErrorListener] = null;
    this[_cachedThumbPainter] = null;
    this[_isPainting] = false;
    this.state = state;
    if (!(textDirection != null)) dart.assertFailed(null, I[0], 770, 15, "textDirection != null");
    this[_activeThumbImage] = activeThumbImage;
    this[_onActiveThumbImageError] = onActiveThumbImageError;
    this[_inactiveThumbImage] = inactiveThumbImage;
    this[_onInactiveThumbImageError] = onInactiveThumbImageError;
    this[_activeTrackColor] = activeTrackColor;
    this[_inactiveTrackColor] = inactiveTrackColor;
    this[_configuration] = configuration;
    this[_textDirection] = textDirection;
    this[_surfaceColor] = surfaceColor;
    $switch$._RenderSwitch.__proto__.new.call(this, {value: value, tristate: false, activeColor: activeColor, inactiveColor: inactiveColor, hoverColor: hoverColor, focusColor: focusColor, reactionColor: reactionColor, inactiveReactionColor: inactiveReactionColor, splashRadius: splashRadius, onChanged: onChanged, additionalConstraints: additionalConstraints, hasFocus: hasFocus, hovering: hovering, vsync: state});
    this[_drag] = (t2 = new monodrag.HorizontalDragGestureRecognizer.new(), (() => {
      t2.onStart = dart.bind(this, _handleDragStart);
      t2.onUpdate = dart.bind(this, _handleDragUpdate);
      t2.onEnd = dart.bind(this, _handleDragEnd);
      t2.dragStartBehavior = dragStartBehavior;
      return t2;
    })());
  }).prototype = $switch$._RenderSwitch.prototype;
  dart.addTypeTests($switch$._RenderSwitch);
  dart.addTypeCaches($switch$._RenderSwitch);
  dart.setMethodSignature($switch$._RenderSwitch, () => ({
    __proto__: dart.getMethods($switch$._RenderSwitch.__proto__),
    [_handleDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_handleDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_handleDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [_createDefaultThumbDecoration]: dart.fnType(box_decoration.BoxDecoration, [ui.Color, dart.nullable(image_provider.ImageProvider$(core.Object)), dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))]),
    [_handleDecorationChanged]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature($switch$._RenderSwitch, () => ({
    __proto__: dart.getGetters($switch$._RenderSwitch.__proto__),
    activeThumbImage: dart.nullable(image_provider.ImageProvider$(core.Object)),
    onActiveThumbImageError: dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])),
    inactiveThumbImage: dart.nullable(image_provider.ImageProvider$(core.Object)),
    onInactiveThumbImageError: dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])),
    activeTrackColor: ui.Color,
    inactiveTrackColor: ui.Color,
    configuration: image_provider.ImageConfiguration,
    textDirection: ui.TextDirection,
    dragStartBehavior: recognizer.DragStartBehavior,
    surfaceColor: ui.Color,
    [_trackInnerLength]: core.double,
    [_drag]: monodrag.HorizontalDragGestureRecognizer
  }));
  dart.setSetterSignature($switch$._RenderSwitch, () => ({
    __proto__: dart.getSetters($switch$._RenderSwitch.__proto__),
    activeThumbImage: dart.nullable(image_provider.ImageProvider$(core.Object)),
    onActiveThumbImageError: dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])),
    inactiveThumbImage: dart.nullable(image_provider.ImageProvider$(core.Object)),
    onInactiveThumbImageError: dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])),
    activeTrackColor: ui.Color,
    inactiveTrackColor: ui.Color,
    configuration: image_provider.ImageConfiguration,
    textDirection: ui.TextDirection,
    dragStartBehavior: recognizer.DragStartBehavior,
    surfaceColor: ui.Color,
    [_drag]: monodrag.HorizontalDragGestureRecognizer
  }));
  dart.setLibraryUri($switch$._RenderSwitch, I[1]);
  dart.setFieldSignature($switch$._RenderSwitch, () => ({
    __proto__: dart.getFields($switch$._RenderSwitch.__proto__),
    [_activeThumbImage]: dart.fieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    [_onActiveThumbImageError]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
    [_inactiveThumbImage]: dart.fieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    [_onInactiveThumbImageError]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
    [_activeTrackColor]: dart.fieldType(ui.Color),
    [_inactiveTrackColor]: dart.fieldType(ui.Color),
    [_configuration]: dart.fieldType(image_provider.ImageConfiguration),
    [_textDirection]: dart.fieldType(ui.TextDirection),
    [_surfaceColor]: dart.fieldType(ui.Color),
    state: dart.fieldType($switch$._SwitchState),
    [___RenderSwitch__drag]: dart.fieldType(dart.nullable(monodrag.HorizontalDragGestureRecognizer)),
    [___RenderSwitch__drag_isSet]: dart.fieldType(core.bool),
    [_needsPositionAnimation]: dart.fieldType(core.bool),
    [_cachedThumbColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_cachedThumbImage]: dart.fieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    [_cachedThumbErrorListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
    [_cachedThumbPainter]: dart.fieldType(dart.nullable(decoration.BoxPainter)),
    [_isPainting]: dart.fieldType(core.bool)
  }));
  dart.defineLazy($switch$, {
    /*$switch$._kTrackHeight*/get _kTrackHeight() {
      return 14;
    },
    /*$switch$._kTrackWidth*/get _kTrackWidth() {
      return 33;
    },
    /*$switch$._kTrackRadius*/get _kTrackRadius() {
      return 7;
    },
    /*$switch$._kThumbRadius*/get _kThumbRadius() {
      return 10;
    },
    /*$switch$._kSwitchMinSize*/get _kSwitchMinSize() {
      return 40;
    },
    /*$switch$._kSwitchWidth*/get _kSwitchWidth() {
      return 59;
    },
    /*$switch$._kSwitchHeight*/get _kSwitchHeight() {
      return 48;
    },
    /*$switch$._kSwitchHeightCollapsed*/get _kSwitchHeightCollapsed() {
      return 40;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/switch.dart", {
    "package:flutter/src/material/switch.dart": $switch$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["switch.dart"],"names":[],"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","file":"../../../../../../../../D:/packages/flutter/src/material/switch.dart.lib.js"}');
  // Exports:
  return {
    src__material__switch: $switch$
  };
}));

//# sourceMappingURL=switch.dart.lib.js.map
